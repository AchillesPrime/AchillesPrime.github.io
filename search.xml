<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Java Foundation.D</title>
      <link href="/2018/10/08/Java-Foundation-D/"/>
      <url>/2018/10/08/Java-Foundation-D/</url>
      
        <content type="html"><![CDATA[<h1 id="Three-Questions-Before-Embarking-On-A-trip-To-Java"><a href="#Three-Questions-Before-Embarking-On-A-trip-To-Java" class="headerlink" title="Three Questions Before Embarking On A trip To Java"></a>Three Questions Before Embarking On A trip To Java</h1><blockquote><h4 id="为什么要用这些技术"><a href="#为什么要用这些技术" class="headerlink" title="为什么要用这些技术"></a>为什么要用这些技术</h4></blockquote><blockquote><h4 id="用这些技术有什么好处"><a href="#用这些技术有什么好处" class="headerlink" title="用这些技术有什么好处"></a>用这些技术有什么好处</h4></blockquote><blockquote><h4 id="如果不用这些技术行不行"><a href="#如果不用这些技术行不行" class="headerlink" title="如果不用这些技术行不行"></a>如果不用这些技术行不行</h4></blockquote><hr><h1 id="面向对象（二）"><a href="#面向对象（二）" class="headerlink" title="面向对象（二）"></a>面向对象（二）</h1><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> String s1<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>s1 <span class="token operator">+</span>                                  <span class="token string">"晚凉天净月华开"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                  <span class="token string">"相得玉楼瑶殿影"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                  <span class="token string">"空照秦淮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Hello</span>                   <span class="token comment" spellcheck="true">//HelloWorld 子类继承了 Hello 父类</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>           HelloWorld h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//创建 HelloWorld 类的实例对象</span>           h<span class="token punctuation">.</span>s1 <span class="token operator">=</span> <span class="token string">"金锁已沉埋"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">"壮气蒿莱"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//调用继承的 s1 成员变量</span>           h<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*           调用继承的 info() 方法           输出：           金锁已沉埋           壮气蒿莱            晚凉天净月华开            相得玉楼瑶殿影           空照秦淮           */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>Java 通过关键字 <code>extends</code> 实现继承<ul><li>被继承的类：父类</li><li>实现继承的类：子类</li><li>父类和子类的关系，是一种一般和特殊的关系</li><li>父类的包含范围总是比子类包含的范围要大<ul><li>所以可以认为父类是大类，子类是小类</li></ul></li><li><code>extends</code> 关键字的英文翻译是“扩展”，而不是“继承”<ul><li>子类是对父类的扩展，子类是一种特殊的父类</li><li>之所以翻译成“继承”，是因为子类可以获得父类所有的成员变量和方法<ul><li>子类不能获得父类的构造器</li></ul></li></ul></li></ul></li><li>Java 不支持 C++ 那种多继承特征，仅支持单继承<ul><li>一个子类只有一个直接父类</li><li>但一个子类可以有无限多个间接父类</li><li>如果定义一个类时，未指定直接父类，则这个类默认扩展 java.lang.Object 类</li><li>java.lang.Object 类是所有类的父类（直接或间接）<ul><li>因此所有的类都可以调用 java.lang.Object 类所定义的实例方法</li></ul></li></ul></li><li>子类扩展（extends）了父类，父类派生（derive）出了子类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"辘轳金井梧桐晚"</span> <span class="token operator">+</span>                                 <span class="token string">"几树惊秋"</span> <span class="token operator">+</span>                                <span class="token string">"昼雨新愁"</span> <span class="token operator">+</span>                               <span class="token string">"百尺虾须在玉钩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Hello</span>                   <span class="token comment" spellcheck="true">//HelloWorld 子类继承了 Hello 父类</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true">//父类方法 fly() 的重写</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"辘轳金井梧桐晚"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                  <span class="token string">"几树惊秋"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                 <span class="token string">"昼雨新愁"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                   <span class="token string">"百尺虾须在玉钩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              HelloWorld h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//创建 HelloWorld 类的实例对象</span>              h<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">/*              调用继承的 fly() 方法              输出：              辘轳金井梧桐晚               几树惊秋               昼雨新愁               百尺虾须在玉钩              */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方法重写错误示例</span><span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//类方法</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//实例方法</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方法重写正确示例</span><span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>               <span class="token comment" spellcheck="true">//private 修饰的实例方法</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//新的类方法</span><span class="token punctuation">}</span></code></pre><ul><li>方法重写（方法覆盖）<ul><li>两同<ul><li>方法名相同</li><li>形参列表相同</li></ul></li><li>两小<ul><li>子类方法返回值类型 &lt;= 父类方法返回值类型</li><li>子类方法声明抛出的异常类 &lt;= 父类方法声明抛出的异常类</li></ul></li><li>一大<ul><li>子类方法的访问权限 &gt;= 父类方法的访问权限</li></ul></li></ul></li><li>覆盖方法和被覆盖方法要么都是类方法，要么都是实例方法<ul><li>不能一个是类方法，一个是实例方法</li></ul></li><li>父类中 <code>private</code> 修饰的方法对其子类是隐藏的，子类无法重写<ul><li>如果子类中定义了一个符合重写条件的方法，依然不是重写，而是定义了一个全新的方法</li></ul></li><li>方法重载和方法重写的区别<ul><li>重载 <code>overload</code><ul><li>发生在同一个类中的多个同名方法之间</li><li>子类获得了父类的方法，所以父类和子类方法之间也可能发生重载</li></ul></li><li>重写 <code>override</code><ul><li>发生在子类和父类的同名方法之间</li></ul></li></ul></li></ul><h3 id="方法的super限定"><a href="#方法的super限定" class="headerlink" title="方法的super限定"></a>方法的super限定</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"辘轳金井梧桐晚"</span> <span class="token operator">+</span>                                 <span class="token string">"几树惊秋"</span> <span class="token operator">+</span>                                <span class="token string">"昼雨新愁"</span> <span class="token operator">+</span>                               <span class="token string">"百尺虾须在玉钩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Hello</span>                   <span class="token comment" spellcheck="true">//HelloWorld 子类继承了 Hello 父类</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true">//父类方法 fly() 的重写</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"辘轳金井梧桐晚"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                  <span class="token string">"几树惊秋"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                 <span class="token string">"昼雨新愁"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                   <span class="token string">"百尺虾须在玉钩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flyfly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>              <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">//父类方法的调用</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              HelloWorld h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//创建 HelloWorld 类的实例对象</span>              h<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">/*              调用重写实例方法 fly()               输出：              辘轳金井梧桐晚               几树惊秋               昼雨新愁               百尺虾须在玉钩              */</span>              h<span class="token punctuation">.</span><span class="token function">flyfly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              调用父类被覆盖的实例方法 fly()              输出：               辘轳金井梧桐晚几树惊秋昼雨新愁百尺虾须在玉钩              */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>super 关键字用于限定该对象调用它从父类继承得到的被覆盖的实例方法<ul><li>类方法、类变量需通过父类类名调用</li><li>同 this 一样， super 也不能出现在 static 修饰的方法中<ul><li>static 修饰的方法属于类，该方法的调用者可能是一个类<ul><li>因而 super 限定也失去了意义</li></ul></li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Hello</span>                   <span class="token comment" spellcheck="true">//HelloWorld 子类继承了 Hello 父类</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//子类实例变量 a 隐藏了父类实例变量 a</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flyfly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              HelloWorld h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//创建 HelloWorld 类的实例对象</span>              h<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              访问子类中定义的实例变量 a              输出：              30              */</span>              h<span class="token punctuation">.</span><span class="token function">flyfly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              访问父类中定义的被隐藏的实例变量 a              输出：              18              */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*当系统创建 HelloWorld 对象时实际上会为 HelloWorld 对象分配两块内存一块用于存储在 Hello 类中定义的实例变量 a一块用于存储在 HelloWorld 类中定义的实例变量 a*/</span><span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">HelloW</span> <span class="token keyword">extends</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//私有变量</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span>   <span class="token punctuation">{</span>              <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              HelloW h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//System.out.println(h.a);</span>              <span class="token comment" spellcheck="true">/*              编译错误              程序不可访问 h 的私有变量 a              */</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Hello<span class="token punctuation">)</span>h<span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              强制将 h 变量显式地转型为 Hello 类型              即可访问实例变量 a              输出：              100              */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>super 关键字用于限定该构造器初始化的是该对象从父类继承得到的被隐藏的实例变量，而不是该类自己定义的实例变量<ul><li>子类定义个和父类同名的实例变量<ul><li>子类实例变量会隐藏父类实例变量（不是覆盖）</li></ul></li></ul></li><li>如果子类没有包含和父类同名的成员变量，则在子类中访问时无需使用 super 或父类名作为主调访问父类中定义的成员变量</li><li>a 成员变量的访问顺序<ul><li>查找该方法中是否有名为 a 的局部变量</li><li>查找当前类中是否有名为 a 的成员变量</li><li>查找直接父类中是否有名为 a 的成员变量，依次上溯所有的父类，直到 java.lang.Object 类</li><li>编译错误</li></ul></li><li>当创建一个子类对象时，系统会为当前子类以及所有父类里定义的实例变量分配内存</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> String s1<span class="token punctuation">;</span>      <span class="token keyword">public</span> String s2<span class="token punctuation">;</span>      <span class="token keyword">public</span> String s3<span class="token punctuation">;</span>      <span class="token keyword">public</span> String s4<span class="token punctuation">;</span>      <span class="token keyword">public</span> String s5<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">Hello</span><span class="token punctuation">(</span>String s1 <span class="token punctuation">,</span>                    String s2 <span class="token punctuation">,</span>                   String s3 <span class="token punctuation">,</span>                   String s4 <span class="token punctuation">,</span>                   String s5<span class="token punctuation">)</span>      <span class="token punctuation">{</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>s1 <span class="token operator">=</span> s1<span class="token punctuation">;</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>s2 <span class="token operator">=</span> s2<span class="token punctuation">;</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>s3 <span class="token operator">=</span> s3<span class="token punctuation">;</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>s4 <span class="token operator">=</span> s4<span class="token punctuation">;</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>s5 <span class="token operator">=</span> s5<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>              <span class="token keyword">public</span> String s6<span class="token punctuation">;</span>       <span class="token keyword">public</span> String s7<span class="token punctuation">;</span>       <span class="token keyword">public</span> String s8<span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span>String s1 <span class="token punctuation">,</span>                          String s2 <span class="token punctuation">,</span>                        String s3 <span class="token punctuation">,</span>                        String s4 <span class="token punctuation">,</span>                        String s5 <span class="token punctuation">,</span>                       String s6 <span class="token punctuation">,</span>                       String s7 <span class="token punctuation">,</span>                       String s8<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              <span class="token keyword">super</span><span class="token punctuation">(</span>s1 <span class="token punctuation">,</span> s2 <span class="token punctuation">,</span> s3 <span class="token punctuation">,</span> s4 <span class="token punctuation">,</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用父类构造器 Hello 的初始化代码</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>s6 <span class="token operator">=</span> s6<span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>s7 <span class="token operator">=</span> s7<span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>s8 <span class="token operator">=</span> s8<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              HelloWorld h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token string">"人生愁恨何能免？"</span> <span class="token punctuation">,</span>                                           <span class="token string">"销魂独我情何限！"</span> <span class="token punctuation">,</span>                                            <span class="token string">"故国梦重归"</span> <span class="token punctuation">,</span>                                         <span class="token string">"觉来双泪垂"</span> <span class="token punctuation">,</span>                                         <span class="token string">"高楼谁与上"</span> <span class="token punctuation">,</span>                                         <span class="token string">"长记秋晴望"</span> <span class="token punctuation">,</span>                                         <span class="token string">"往事已成空"</span> <span class="token punctuation">,</span>                                         <span class="token string">"还如一梦中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>s1 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                 h<span class="token punctuation">.</span>s2 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                  h<span class="token punctuation">.</span>s3 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                 h<span class="token punctuation">.</span>s4 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                 h<span class="token punctuation">.</span>s5 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                 h<span class="token punctuation">.</span>s6 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                 h<span class="token punctuation">.</span>s7 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                 h<span class="token punctuation">.</span>s8<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              输出：              人生愁恨何能免？              销魂独我情何限！               故国梦重归              觉来双泪垂               高楼谁与上              长记秋晴望               往事已成空              还如一梦中              */</span>       <span class="token punctuation">}</span>          <span class="token punctuation">}</span></code></pre><ul><li>子类不会获得父类的构造器，但子类可以调用父类构造器的初始化代码<ul><li>在一个构造器中调用另一个重载的构造器，使用关键字 this</li><li>在子类构造器中调用父类的构造器，使用关键字 super<ul><li>也必须出现在子类构造器执行体的第一行</li><li>系统会根据关键字 super 后面的括号内的实参，来匹配调用父类中形参列表与之对应的构造器</li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello 类的无参数构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">HelloW</span> <span class="token keyword">extends</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>           <span class="token keyword">public</span> <span class="token function">HelloW</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloW 类的无参数构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token function">HelloW</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span>      <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloW 类的带一个参数 "</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">" 的构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token function">HelloW</span><span class="token punctuation">(</span>String s <span class="token punctuation">,</span> String ss<span class="token punctuation">)</span>      <span class="token punctuation">{</span>             <span class="token keyword">this</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//this 关键字调用当前类中重载的构造器的初始化代码</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloW 类的带两个参数 "</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"、"</span> <span class="token operator">+</span> ss <span class="token operator">+</span> <span class="token string">" 的构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">HelloW</span><span class="token punctuation">{</span>              <span class="token keyword">public</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//super("李煜" , "周邦彦");    //super 关键字调用父类中有两个参数的构造器</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld 类的无参数构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              输出：              Hello 类的无参数构造器              HelloW 类的带一个参数 李煜 的构造器              HelloW 类的带两个参数 李煜 、周邦彦 的构造器              HelloWorld 类的无参数构造器              */</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>子类调用父类构造器的几种情况<ul><li>使用 super 关键字显示调用<ul><li>系统会根据关键字 super 后面的括号内的实参，来匹配调用父类中形参列表与之对应的构造器</li></ul></li><li>使用 this 关键字显示调用当前子类中重载的构造器<ul><li>系统会根据关键字 this 后面的括号内的实参，来匹配调用当前子类中形参列表与之对应的构造器</li><li>执行另一个构造器时即会调用父类的无参数构造器</li></ul></li><li>既没有 super 调用也没有 this 调用<ul><li>系统会在执行子类构造器之前，隐式调用父类无参数构造器</li></ul></li></ul></li><li>不管哪种情况<ul><li>父类构造器总会在子类构造器之前执行</li><li>不停地上溯</li><li>创建任何 Java 对象，最先执行的总是 java.lang.Object 类的构造器</li></ul></li></ul><p><img src="https://i.loli.net/2018/10/08/5bbacda087d61.jpg" alt="8"></p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类的实例方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类的被覆盖的实例方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>              <span class="token keyword">public</span> String a <span class="token operator">=</span> <span class="token string">"周邦彦"</span><span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类覆盖父类的实例方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类的实例方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              Hello h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h1<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//输出：10</span>              h1<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">//输出：父类的实例方法</span>              h1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">//输出：父类的被覆盖的实例方法</span>              HelloWorld h2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h2<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//输出：周邦彦</span>              h2<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">//输出：父类的实例方法</span>              h2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">//输出：子类覆盖父类的实例方法</span>              Hello h3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h3<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//输出：10</span>              h3<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">//输出：父类的实例方法</span>              h3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">//输出：子类覆盖父类的实例方法</span>              <span class="token comment" spellcheck="true">//h3.sub();</span>              <span class="token comment" spellcheck="true">/*              编译错误              h3 编译时是 Hello 类型              h3 运行时是 HelloWorld 类型              没有定义 sub() 方法              */</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>Java 引用变量的两个类型<ul><li>编译时类型<ul><li>由声明该变量的类型决定</li></ul></li><li>运行时类型<ul><li>由实际赋给变量的类型决定</li></ul></li></ul></li><li>编译时类型和运行时类型不一致，就会出现多态（Polymorphism）<ul><li>Java 允许把一个子类的实例对象直接赋给一个父类的引用变量，且无需任何类型转换，或称向上转换（upcasting）</li><li>总是由系统自动成功完成<ul><li>从侧面证实了子类是一种特殊的父类</li></ul></li><li>编译时是父类类型</li><li>运行时是子类类型</li><li>实际上是子类实例 </li><li>调用该引用变量的方法时，其行为总是表现出子类的行为特征<ul><li>这就可能出现：相同类型的变量、调用同一个方法时，呈现出多种不同的行为特征，这就是多态</li></ul></li><li>实例变量不具备多态性<ul><li>系统访问的是编译时类型的类中所定义的实例变量</li></ul></li></ul></li><li><code>Object p = new Person()</code><ul><li>p 只能调用 Object 类中的方法</li><li>不能调用 Person 类中的方法<ul><li>除非 Person 类中有 Object 类的方法重写</li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>              <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              Object obj <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>              String objStr <span class="token operator">=</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objStr<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              obj 编译时类型为 Object 类              obj 运行时类型为 String 类              Object 与 String 存在继承关系              可以强制类型转换              obj 实际类型为 String 类型              输出：              Hello              */</span>              Object objPri <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              obj 编译时类型为 Object 类              obj 运行时类型为 Integer 类              Object 与 Integer 存在继承关系              可以强制类型转换              objPri 实际类型为 Integer 类型              */</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>objPri <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  String str <span class="token operator">=</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>objPri<span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">/*              objPri 实际类型为 Integer 类型              所以此选择条件为假              即不可成功转换              先用 instanceof 判断              再用 type 转换              从而保证程序不会出错              无输出              */</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>引用变量的强制类型转换<ul><li><code>(type)variable</code></li><li>只能在具有继承关系的两个类型之间转换</li><li>试图把一个父类实例转换成子类类型，则这个对象必须实际是子类实例才行<ul><li>即编译时为父类类型</li><li>运行时为子类类型</li><li>否则将引发 ClassCastException 异常</li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>              <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              Object hello <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串是否是 Object 类的实例："</span>                                      <span class="token operator">+</span>  <span class="token punctuation">(</span>hello <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//true</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串是否是 String 类的实例："</span>                                      <span class="token operator">+</span>  <span class="token punctuation">(</span>hello <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//true</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串是否是 Math 类的实例："</span>                                        <span class="token operator">+</span>  <span class="token punctuation">(</span>hello <span class="token keyword">instanceof</span> <span class="token class-name">Math</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//false</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串是否是 Comparable 类的实例："</span>                                  <span class="token operator">+</span>  <span class="token punctuation">(</span>hello <span class="token keyword">instanceof</span> <span class="token class-name">Comparable</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>              String a <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串是否是 Math 类的实例："</span>                                        <span class="token operator">+</span>  <span class="token punctuation">(</span>hello <span class="token keyword">instanceof</span> <span class="token class-name">Math</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//false</span>              <span class="token comment" spellcheck="true">//System.out.println("字符串是否是 Math 类的实例："       </span>                                 <span class="token operator">+</span>  <span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Math</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*               编译错误               */</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><code>instanceof</code><ul><li>前一个操作数<ul><li>引用类型变量</li></ul></li><li>后一个操作数<ul><li>类、接口（可以把接口理解成一个特殊的类）</li></ul></li><li>用于判断前面的对象是否是后面类的实例，或者其子类、实现类的实例<ul><li>是否可以成功转换，从而保证程序更加健壮</li></ul></li><li>如果是，返回 true</li><li>如果不是，返回 false</li></ul></li><li>前面操作数的编译时类型<ul><li>要么与后面的类相同</li><li>要么与后面的类具有父子继承关系</li><li>否则会引起编译错误</li></ul></li></ul><h3 id="继承与组合"><a href="#继承与组合" class="headerlink" title="继承与组合"></a>继承与组合</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>             <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将被子类重写的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>              <span class="token keyword">private</span> String name<span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类重写父类的方法:"</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//HelloWorld h = new HelloWorld();</span>              <span class="token comment" spellcheck="true">/*              创建 HelloWorld 类的实例对象时              会先执行其父类 Hello 的构造器              父类 Hello 的构造器内调用了被其子类重写的实例方法 test()              则变成调用子类重写的实例方法 test()              而此时 HelloWorld 类的实例对象 h 的实例变量 name 值为 null              所以会引发空指针异常：              NullPointerException              */</span>                 <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>继承是实现类复用的重要手段，但带来了一个最大的坏处<ul><li>破坏封装</li><li>造成子类和父类的严重耦合，父类的实现细节对子类不再透明，子类可以恶意篡改父类的方法</li></ul></li><li>设计父类通常应该遵循如下规则<ul><li>尽量隐藏父类的内部数据</li><li>尽量把所有成员变量都设置为 private 访问类型，不让子类直接访问父类的成员变量</li><li>不让子类随意访问、修改父类的方法</li><li>父类中辅助其他方法的工具方法，应该都使用 private 访问控制符修饰</li><li>父类中供外部类调用的方法设置为 public 的同时，用 final 修饰，让子类无法重写</li><li>如果希望父类中的方法被重写，但又不希望被其他类自由访问，应该用 protected 访问控制符修饰 </li><li>尽量不要在父类构造器中调用将要被子类重写的方法</li></ul></li><li>如果想把某个类设置成最终类（即不能被当作父类）<ul><li>可以使用 final 修饰</li><li>例如 JDK 提供的 java.lang.String 和 java.lang.System</li><li>或者可以使用 private 修饰这个类的所有构造器，从而保证子类无法调用该类的构造器，也就无法继承这个类<ul><li>对于把所有构造器都用 private 修饰的类，可以另外提供一个静态方法，用于创建该类的实例</li></ul></li><li>到底何时需要使用父类派生子类<ul><li>子类需要额外增加属性，而不仅仅时属性值的改变</li><li>子类需要额外增加自己独有的行为特征（包括新增的方法或重写父类的方法）</li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//通过继承复用</span><span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"别来春半"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">"触目柔肠断"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>             <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"砌下落梅如雪乱"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">"拂了一身还满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">HelloW</span> <span class="token keyword">extends</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"$$$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>              <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"￥￥￥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              HelloW h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              h1<span class="token punctuation">.</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              h1<span class="token punctuation">.</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              通过继承 Hello 类              使用实例方法 B()              输出：              别来春半               触目柔肠断               砌下落梅如雪乱               拂了一身还满               $$$              */</span>              HelloWorld h2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              h2<span class="token punctuation">.</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              h2<span class="token punctuation">.</span><span class="token function">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              通过继承 Hello 类              使用实例方法 B()              输出：              别来春半               触目柔肠断               砌下落梅如雪乱               拂了一身还满               ￥￥￥              */</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//通过组合复用</span><span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"雁来音信无凭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>             <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"路遥归梦难成"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                <span class="token string">"离恨恰如春草"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                 <span class="token string">"更行更远还生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">HelloW</span><span class="token punctuation">{</span>      <span class="token keyword">private</span> Hello L<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//将原来的父类组合到原来的子类中，作为子类的一个组合部分</span>      <span class="token keyword">public</span> <span class="token function">HelloW</span><span class="token punctuation">(</span>Hello L<span class="token punctuation">)</span>      <span class="token punctuation">{</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>L <span class="token operator">=</span> L<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">//重新定义一个自己的 B() 方法</span>      <span class="token punctuation">{</span>             L<span class="token punctuation">.</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//直接复用原来的父类的 B() 方法来实现子类 HelloW 的 B() 方法</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"$$$$$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>              <span class="token keyword">private</span> Hello L<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//将原来的父类组合到原来的子类中，作为子类的一个组合部分</span>       <span class="token keyword">public</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span>Hello L<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>L <span class="token operator">=</span> L<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//重新定义一个自己的 B() 方法</span>       <span class="token punctuation">{</span>               L<span class="token punctuation">.</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//直接复用原来的父类的 B() 方法来实现子类 HelloWorld 的 B() 方法</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"￥￥￥￥￥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              Hello h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//需要显式创建被组合的父类的对象</span>              HelloW h2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloW</span><span class="token punctuation">(</span>h1<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//通过父类的对象来创建子类的对象</span>              h2<span class="token punctuation">.</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              h2<span class="token punctuation">.</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              输出：              雁来音信无凭               路遥归梦难成               离恨恰如春草               更行更远还生              $$$$$              */</span>              Hello h3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//需要显式创建被组合的父类的对象</span>              HelloWorld h4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span>h3<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//通过父类的对象来创建子类的对象</span>              h4<span class="token punctuation">.</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              h4<span class="token punctuation">.</span><span class="token function">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              输出：              雁来音信无凭               路遥归梦难成               离恨恰如春草               更行更远还生              ￥￥￥￥￥              */</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>组合也是实现类复用的重要方式，并能提供更好的封装性</li><li>把该类当成另一个类的组合成分，从而允许新的类直接复用该类的 public 方法</li><li>用户看到的是新类的方法，而不能看到被组合对象的方法<ul><li>因此通常需要在新类里使用 private 修饰被组合的旧类对象</li></ul></li><li><code>is a</code><ul><li>“是”</li><li>对已有的类做一番改造，以此获得一个特殊的版本</li><li>将一个较为抽象的类改造成能适用于某些特定需求的类</li></ul></li><li><code>has a</code><ul><li>“有”</li><li>如果两个类之间有明显的整体、部分的关系</li><li>可以把部分作为整体的组合成员变量，借助于部分的方法来实现整体的方法</li></ul></li></ul><h3 id="初始化块"><a href="#初始化块" class="headerlink" title="初始化块"></a>初始化块</h3><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span>  <span class="token punctuation">{</span>       <span class="token number">0</span> <span class="token operator">~</span> n 条初始化块的可执行性代码<span class="token punctuation">}</span></code></pre><ul><li>Java 类里的第四种成员（前三种是成员变量、方法、构造器）</li><li>前面定义的初始化块先执行，后面定义的初始化块后执行</li><li>修饰符<ul><li>省略：普通初始化块<ul><li>负责对对象执行初始化</li></ul></li><li>static：静态初始化块<ul><li>类初始化块</li><li>负责对类进行初始化</li></ul></li></ul></li><li>类初始化块在类初始化阶段执行，普通初始化块在创建对象时执行<ul><li>类初始化块先于普通初始化块执行</li></ul></li><li>类初始化块通常用于对类变量执行初始化处理，不能对实例变量进行初始化处理<ul><li>遵循静态成员不能访问非静态成员的规则</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>              <span class="token punctuation">{</span>             <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化块的局部变量 a 大于 4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一个初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二个初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参数构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">/*              输出：              初始化块的局部变量 a 大于 4              第一个初始化块              第二个初始化块              无参数构造器              */</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>当创建 Java 对象的时候，总是先调用该类初始化块<ul><li>无法通过类、对象来调用初始化块，只在创建对象时隐式执行，并先于构造器</li><li>初始化块不能接受任何参数，对同一个类的所有对象所进行的初始化处理完全相同<ul><li>如果多个构造器中有相同的初始化代码，且无须接受参数，可提取成一个初始化块</li><li>更好地提高初始化块代码的复用，提高整个应用的可维护性</li></ul></li></ul></li><li>可以把多个普通初始化块合并成一个初始化块，从而让程序更加简洁、可读性更强</li><li>与构造器类似，普通初始化块会一直上溯到 java.lang.Object 类的初始化块，然后一直执行下来</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>      <span class="token keyword">static</span>      <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello 类的静态初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello 类的普通初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello 类的无参数构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">HelloW</span> <span class="token keyword">extends</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>      <span class="token keyword">static</span>      <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloW 类的静态初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloW 类的普通初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token function">HelloW</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloW 类的无参数构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token function">HelloW</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span>      <span class="token punctuation">{</span>             <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//通过 this 调用同一类中重载的构造器</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloW 类的带参数构造器,参数值为："</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">HelloW</span><span class="token punctuation">{</span>              <span class="token keyword">static</span>      <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld 类的静态初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld 类的普通初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>             <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"007"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//通过 super 调用父类中只有一个字符串参数的构造器</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld 类的无参数构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>      <span class="token punctuation">{</span>             <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/*             类初始化阶段   （静态初始化块）             对象初始化阶段 （普通初始化块、构造器）             输出：             Hello       类的静态初始化块             HelloW      类的静态初始化块             HelloWorld  类的静态初始化块             Hello 类的普通初始化块             Hello 类的无参数构造器             HelloW 类的普通初始化块             HelloW 类的无参数构造器             HelloW 类的带参数构造器,参数值为：007                          HelloWorld 类的普通初始化块             HelloWorld 类的无参数构造器             Hello 类的普通初始化块             Hello 类的无参数构造器                          HelloW 类的普通初始化块             HelloW 类的无参数构造器             HelloW 类的带参数构造器,参数值为：007                          HelloWorld 类的普通初始化块             HelloWorld 类的无参数构造器             */</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>当 JVM 第一个主动使用某个类时，系统会在类准备阶段为该类的所有类变量分配内存，在初始化阶段则负责初始化这些类变量</li><li>类的静态初始化块也会一直上溯到 java.lang.Object 类的静态初始化块，全部的类初始化块执行完后，才可以在系统中使用类</li><li>类初始化成功后，将一直存在于虚拟机中，因此第二次创建类实例对象时，无需再次对类进行初始化</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>             <span class="token punctuation">{</span>             a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//普通初始化块将 a 实例变量赋值为 6</span>      <span class="token punctuation">}</span>      <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>      <span class="token keyword">static</span>      <span class="token punctuation">{</span>             b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//静态初始化块将 a 类变量赋值为 6</span>      <span class="token punctuation">}</span>      <span class="token keyword">static</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>      <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/*             输出：             9             9             */</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>普通初始化块与声明实例变量时指定初始值的执行顺序，与它们在源代码中的排列顺序相同</li><li>类初始化块与声明类变量时指定初始值的执行顺序，与它们在源代码中的排列顺序相同</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Foundation </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Foundation.C</title>
      <link href="/2018/10/07/Java-Foundation-C/"/>
      <url>/2018/10/07/Java-Foundation-C/</url>
      
        <content type="html"><![CDATA[<h1 id="Three-Questions-Before-Embarking-On-A-trip-To-Java"><a href="#Three-Questions-Before-Embarking-On-A-trip-To-Java" class="headerlink" title="Three Questions Before Embarking On A trip To Java"></a>Three Questions Before Embarking On A trip To Java</h1><blockquote><h4 id="为什么要用这些技术"><a href="#为什么要用这些技术" class="headerlink" title="为什么要用这些技术"></a>为什么要用这些技术</h4></blockquote><blockquote><h4 id="用这些技术有什么好处"><a href="#用这些技术有什么好处" class="headerlink" title="用这些技术有什么好处"></a>用这些技术有什么好处</h4></blockquote><blockquote><h4 id="如果不用这些技术行不行"><a href="#如果不用这些技术行不行" class="headerlink" title="如果不用这些技术行不行"></a>如果不用这些技术行不行</h4></blockquote><hr><h1 id="面向对象-一"><a href="#面向对象-一" class="headerlink" title="面向对象(一)"></a>面向对象(一)</h1><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><ul><li>成员变量 + 方法 = 类定义</li><li>状态数据 + 行为 = 对象</li></ul></blockquote><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span>   <span class="token keyword">class</span>  类名<span class="token punctuation">{</span>    <span class="token number">0</span> <span class="token operator">~</span> n 个成员变量<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token number">0</span> <span class="token operator">~</span> n 个方法<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token number">0</span> <span class="token operator">~</span> n 个构造器<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><ul><li>修饰符<ul><li>public 、final 、abstract</li><li>或省略</li></ul></li><li>类名<ul><li>一个合法的标识符</li><li>由有意义的英文单词连缀而成（不得有分隔符），每个单词首字母大写，其他皆小写（可读性）</li></ul></li><li>类的三个基本成员<ul><li>成员变量</li><li>方法</li><li>构造器</li></ul></li><li>static <ul><li>static 修饰的成员表明其属于这个类本身，而不属于这个类的单个实例<ul><li>类变量  （静态变量）</li><li>类方法  （静态方法）</li></ul></li><li>没有 static 修饰的成员属于这个类的单个实例，而不属于这个类<ul><li>实例变量 （非静态变量）</li><li>实例方法 （非静态方法）</li></ul></li><li>static 成员不能直接访问非 static 成员</li><li>静态成员不能直接访问非静态成员</li></ul></li></ul><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span>  类型  成员变量名  <span class="token punctuation">[</span><span class="token operator">=</span> 默认值<span class="token punctuation">]</span></code></pre><ul><li>修饰符<ul><li>public 、protected 、private （最多只能出现其一）</li><li>final 、static （可与上面组合）</li><li>或省略</li></ul></li><li>类型<ul><li>基本类型</li><li>引用类型</li></ul></li><li>成员变量名<ul><li>一个合法的标识符</li><li>由有意义的英文单词连缀而成（不得有分隔符），第一个单词首字母小写，后面每个单词首字母大写，其他皆小写（可读性）</li></ul></li><li>可以指定默认值</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Poem</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> String s1<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> String s2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Poem<span class="token punctuation">.</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              类自动初始化              输出：              null              */</span>              Poem p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Poem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建 Poem 类的实例对象并赋给 Poem 类型变量 p </span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>s1 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              通过 Poem 对象的引用 P 访问实例变量 s1 和类变量 s2              输出：              null              null              */</span>              p<span class="token punctuation">.</span>s1 <span class="token operator">=</span> <span class="token string">"往事只堪哀，对景难排"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//直接为实例变量 S1 赋值</span>              p<span class="token punctuation">.</span>s2 <span class="token operator">=</span> <span class="token string">"一任珠帘闲不卷，终日谁来？"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//通过 P 访问类变量 s2 </span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>s1 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              再次通过 Poem 对象的引用 P 访问实例变量 s1 和类变量 s2              输出：              往事只堪哀，对景难排              一任珠帘闲不卷，终日谁来？              */</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Poem<span class="token punctuation">.</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              通过类本身访问类变量 s2              输出：              一任珠帘闲不卷，终日谁来？              */</span>               Poem t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Poem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建 Poem 类的实例对象并赋给 Poem 类型变量 t</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>s1 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> t<span class="token punctuation">.</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              通过 Poem 对象的引用 t 访问实例变量 s1 和类变量 s2              输出：              null              一任珠帘闲不卷，终日谁来？              */</span>               Poem<span class="token punctuation">.</span>s2 <span class="token operator">=</span> <span class="token string">"相得玉楼瑶殿影，空照秦淮。"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//通过类 Poem 访问类变量 s2 并赋值</span>              Poem f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Poem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建 Poem 类的实例对象并赋给 Poem 类型变量 f</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>s1 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> f<span class="token punctuation">.</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              通过 Poem 对象的引用 f 访问实例变量 s1 和类变量 s2              输出：              null              相得玉楼瑶殿影，空照秦淮。              */</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>成员变量（类变量 + 实例变量）<ul><li>类变量作为类本身的一部分，与类本身共存亡</li><li>实例变量作为实例的一部分，与实例共存亡</li><li>类变量的作用域大于实例变量的作用域</li></ul></li><li>如果通过一个实例修改了类变量的值，修改的依然是这个类的类变量，与通过类来修改变量的结果完全相同，这会导致该类的其他实例来访问这个类变量时，也会获得这个被修改过的值<ul><li>同一个类所有的实例对象访问类变量时，实际上访问的是该类本身的同一个变量<ul><li>也就是说，访问了同一片内存区</li></ul></li></ul></li><li>只要为一个类定义了类变量或实例变量<ul><li>系统就会自动在这个类的准备阶段或创建该类的实例对象时，自动进行默认初始化</li><li>与数组动态初始化时的赋值规则完全相同</li></ul></li><li>同一类里，不能定义两个同名的成员变量，即使一个是类变量，一个是实例变量，也不行</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>       <span class="token keyword">private</span> String s1 <span class="token operator">=</span> <span class="token string">"醉乡路稳宜频到"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">"此外不堪行"</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//定义实例变量 s1</span>       <span class="token keyword">private</span> <span class="token keyword">static</span> String s2 <span class="token operator">=</span> <span class="token string">"烛残漏滴频欹枕"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">"起坐不能平"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//定义类变量 s2</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>     <span class="token punctuation">{</span>              String s2 <span class="token operator">=</span> <span class="token string">"昨夜风兼雨"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">"帘帏飒飒秋声"</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//定义方法局部变量 s2</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">//输出方法局部变量 s2</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">.</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//输出类变量 s2</span>              <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//创建 HelloWorld 类的实例对象调用实例方法 info</span>              <span class="token comment" spellcheck="true">/*              昨夜风兼雨               帘帏飒飒秋声               烛残漏滴频欹枕               起坐不能平               世事漫随流水               算来一梦浮生               醉乡路稳宜频到               此外不堪行              */</span>     <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>              String s1 <span class="token operator">=</span> <span class="token string">"世事漫随流水"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">"算来一梦浮生"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//定义方法局部变量 s1</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">//输出方法局部变量 s1</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//输出实例变量 s1</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>局部变量（形参 + 方法局部变量 + 代码块局部变量）<ul><li>形参的作用域在整个方法内有效</li><li>方法局部变量的作用域从定义开始，到方法结束时失效</li><li>代码块局部变量的作用域从定义开始，到代码块结束时失效</li></ul></li><li>除了形参，方法局部变量和代码块局部变量必须显式初始化，才能访问它们<ul><li>定义时，系统并未为它们分配内存空间</li><li>直到为它们赋初始值时，系统才会为它们分配可访问的内存</li></ul></li><li>一个方法内不能定义两个同名的方法局部变量</li><li>方法局部变量不能与形参同名</li><li>同一个方法中不同的代码块内的代码块局部变量可以同名</li><li>如果先定义代码块局部变量，后定义方法局部变量<ul><li>前面的代码块局部变量和后面的方法局部变量也可以同名</li></ul></li><li>Java 允许局部变量和成员变量同名<ul><li>如果是在方法内同名</li><li>局部变量会覆盖成员变量</li><li>如果在方法里需要引用成员变量<ul><li>可使用 this（实例变量） 或类名（类变量）作为主调</li></ul></li></ul></li><li>不过大部分时候还是应该尽量避免这种同名现象</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>       <span class="token keyword">static</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//定义一个类变量 i 作为循环变量</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>     <span class="token punctuation">{</span>              <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/*                  输出：                  HelloWorld!                  HelloWorld!                  HelloWorld!                  */</span>              <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>     <span class="token punctuation">{</span>              <span class="token keyword">int</span> i<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//定义一个方法局部变量 i 作为循环变量</span>              <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/*                  输出：                  HelloWorld!                  HelloWorld!                  HelloWorld!                  */</span>              <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>     <span class="token punctuation">{</span>              <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//定义一个代码块局部变量 i 作为循环变量</span>              <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/*                  输出：                  HelloWorld!                  HelloWorld!                  HelloWorld!                  */</span>              <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*上述三个程序运行结果完全相同但只有第三个程序才最符合软件开发规范：一个循环变量只需要在循环体内有效*/</span></code></pre><ul><li>定义一个成员变量（类变量 + 实例变量）时，成员变量将会被放置在堆内存中</li><li>成员变量的作用域将扩大到类存在范围或对象存在范围<ul><li>增大了变量的生存时间，将导致更大的内存开销</li><li>扩大了变量的作用域，不利于提高程序的内聚性</li></ul></li><li>使用成员变量的几种情况<ul><li>描述某个类或某个对象的固有信息</li><li>保存某个类或某个对象运行时的状态信息</li><li>需要在某个类的多个方法之间进行共享</li></ul></li><li>局部变量的作用范围越小，它在内存里停留的时间就越短<ul><li>程序运行性能就越好</li><li>能用代码块局部变量的地方，就坚决不要用方法局部变量</li></ul></li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span>  返回值类型  方法名（形参列表）<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//0 ~ n 个可执行语句</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*形参列表：0 ~ n 个：形参类型  形参名*/</span></code></pre><ul><li>修饰符<ul><li>public 、protected 、private （最多只能出现其一）</li><li>final 、abstract （最多只能出现其一）</li><li>static （可以上面组合）</li><li>或省略</li></ul></li><li>返回值类型<ul><li>基本类型</li><li>引用类型</li><li>方法体内必须有一个有效的 <code>return</code> 语句</li><li>如果没有返回值<ul><li><code>void</code> 修饰</li></ul></li></ul></li><li>方法名<ul><li>一个合法的标识符</li><li>与成员变量名命名规则相同，但通常建议以英文动词开头（可读性）</li></ul></li><li>形参列表<ul><li>英文逗号 <code>,</code> 隔开</li><li>谁调用方法，谁负责赋值形参</li></ul></li><li>方法不能独立存在<ul><li>只能在类体内定义</li><li>逻辑上要么属于类，要么属于方法</li><li>必须使用类或对象来调用</li></ul></li><li>static 修饰的方法即可使用类调用，也可使用该的类的实例调用<ul><li>但使用该类的任何对象调用，结果一样</li><li>因为底层依然是该类作为主调者</li></ul></li><li>非 static 修饰的方法只能使用实例（对象）来调用<ul><li>不同的对象调用，结果可能不同</li></ul></li><li>参数传递机制：值传递<ul><li>将实际参数值的副本（复制品）传入方法内</li><li>参数本身不会受到任何影响</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>poems<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">/*       定义一个 test 方法       最后一个 String 类型形参后加了三个点 ...       表明 String 类型形参可接受多个数值       多个数值被当作数组传入       即       形参个数可变的参数本质就是一个数组参数       */</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//输出整型变量 a 的值</span>              <span class="token keyword">for</span><span class="token punctuation">(</span>String poem <span class="token operator">:</span> poems<span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>poem<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">/*              foreach 循环              循环遍历数组元素              */</span>       <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token punctuation">,</span> <span class="token string">"林花谢了春红"</span> <span class="token punctuation">,</span>                        <span class="token string">"太匆匆"</span>  <span class="token punctuation">,</span>                       <span class="token string">"无奈朝来寒雨晚来风"</span> <span class="token punctuation">,</span>                      <span class="token string">"胭脂泪"</span> <span class="token punctuation">,</span>                        <span class="token string">"相留醉"</span> <span class="token punctuation">,</span>                        <span class="token string">"几时重"</span> <span class="token punctuation">,</span>                        <span class="token string">"自是人生长恨水长东"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              多值传入              或以数组形式传入              输出：              7              林花谢了春红              太匆匆              无奈朝来寒雨晚来风              胭脂泪              相留醉              几时重              自是人生长恨水长东              */</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//等价的数组形式传入</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> poems<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">/*       定义一个 test 方法       传入数组形参       */</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//输出整型变量 a 的值</span>              <span class="token keyword">for</span><span class="token punctuation">(</span>String poem <span class="token operator">:</span> poems<span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>poem<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">/*              foreach 循环              循环遍历数组元素              */</span>       <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                                   <span class="token string">"林花谢了春红"</span> <span class="token punctuation">,</span>                                      <span class="token string">"太匆匆"</span>  <span class="token punctuation">,</span>                                     <span class="token string">"无奈朝来寒雨晚来风"</span> <span class="token punctuation">,</span>                                    <span class="token string">"胭脂泪"</span> <span class="token punctuation">,</span>                                      <span class="token string">"相留醉"</span> <span class="token punctuation">,</span>                                      <span class="token string">"几时重"</span> <span class="token punctuation">,</span>                                      <span class="token string">"自是人生长恨水长东"</span>                                <span class="token punctuation">}</span>                                <span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              必须以数组形式传入              输出：              7              林花谢了春红              太匆匆              无奈朝来寒雨晚来风              胭脂泪              相留醉              几时重              自是人生长恨水长东              */</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>形参个数可变的方法<ul><li>只能处于形参列表的最后</li><li>一个方法中只能有一个个数可变的形参</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*f(0)     = 1f(1)     = 4f(n + 2) = 2 * f(n + 1) + f(n)递归调用形式：f(n)     = 2 * f(n - 1) + f(n - 2)*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//定义一个类方法 fn 返回 int 类型</span>       <span class="token punctuation">{</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">else</span>              <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">fn</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fn</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">/*              方法调用它自身              向着已知的 f(0)=1 、 f(1)=4 方向递归              */</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//输出：10497</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*f(20)     = 1f(21)     = 4f(n + 2) = 2 * f(n + 1) + f(n)递归调用形式：f(n)     = f(n + 2) - 2 * f(n + 1)*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//定义一个类方法 fn 返回 int 类型</span>       <span class="token punctuation">{</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">21</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">else</span>              <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">fn</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">/*              方法调用它自身              向着已知的 f(20)=1 、 f(21)=4 方向递归              */</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//输出：-3771</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>递归<ul><li>一个方法体内调用自身</li><li>向已知的方向递归</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true">//定义一个 test() 方法无参数</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"帘外雨潺潺"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">"春意阑珊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>s1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//定义一个 test() 方法有参数</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"罗衾不耐五更寒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span><span class="token punctuation">(</span>String s <span class="token operator">:</span> s1<span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              Dog d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//创建一个 Dog 类的实例对象并赋给 Dog 类型的变量 d</span>              d<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//无参数传入</span>               <span class="token comment" spellcheck="true">/*               输出：               帘外雨潺潺               春意阑珊               */</span>              d<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"梦里不知身是客"</span> <span class="token punctuation">,</span> <span class="token string">"一晌贪欢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//传入参数</span>               <span class="token comment" spellcheck="true">/*               输出：               罗衾不耐五更寒               梦里不知身是客               一晌贪欢               */</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//重载参数可变的形参</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>String s1<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//定义第一个 test() 方法，有一个参数</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>s2<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//定义第二个 test() 方法，有参数个数可变的参数</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"$$$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span><span class="token punctuation">(</span>String s <span class="token operator">:</span> s2<span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              Dog d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//创建一个 Dog 类的实例对象并赋给 Dog 类型的变量 d</span>              d<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"独自莫凭栏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//传入一个参数，将调用第一个 test() 方法</span>              d<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//无参数传入，将调用第二个 test() 方法</span>              d<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"无限江山"</span> <span class="token punctuation">,</span> <span class="token string">"别时容易见时难"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/*               传入两个参数               将调用第二个 test() 方法               */</span>              d<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"流水落花春去也"</span> <span class="token punctuation">,</span> <span class="token string">"天上人间"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">/*               传入数组               将调用第二个 test() 方法               */</span>               <span class="token comment" spellcheck="true">/*               输出：               独自莫凭栏               $$$               $$$               无限江山               别时容易见时难               $$$               流水落花春去也               天上人间               */</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>方法重载<ul><li>两同一不同<ul><li>同一个类</li><li>同一个方法名</li><li>不同的形参列表</li><li>与方法的返回值、修饰符等没有任何关系</li></ul></li></ul></li><li>一般不推荐重载形参个数可变的方法，容易降低程序的可读性</li></ul><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span>  构造器名（形参列表）<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//0 ~ n 个可执行语句</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*形参列表：0 ~ n 个：形参类型  形参名*/</span></code></pre><ul><li>修饰符<ul><li>public 、protected 、private</li><li>或省略</li></ul></li><li>构造器名<ul><li>必须和类名相同</li></ul></li><li>形参列表<ul><li>和定义方法的形参列表格式完全相同</li></ul></li><li>构造器不能定义返回值<ul><li>也不能使用 <code>void</code> 声明返回值</li><li>如果定义了返回值或 <code>void</code> 声明，将被当作方法</li></ul></li><li>构造器是一个类创建对象的根本途径<ul><li>如果没有在类定义中编写构造器，系统会为该类提供一个默认的构造器</li></ul></li><li>Java 通过 new 关键字来调用构造器<ul><li>返回该类的实例（对象）</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> String s1<span class="token punctuation">;</span>       <span class="token keyword">public</span> String s2<span class="token punctuation">;</span>       <span class="token keyword">public</span> String s3<span class="token punctuation">;</span>       <span class="token keyword">public</span> String s4<span class="token punctuation">;</span>       <span class="token keyword">public</span> String s5<span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//自定义一个构造器，包含一个参数可变的形参</span>       <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>s1  <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>s2  <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>s3  <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>s4  <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>s5  <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>                                 <span class="token punctuation">{</span>              HelloWorld h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token string">"多少恨"</span> <span class="token punctuation">,</span>                                              <span class="token string">"昨夜梦魂中"</span> <span class="token punctuation">,</span>                                              <span class="token string">"还似旧时游上苑"</span> <span class="token punctuation">,</span>                                              <span class="token string">"车如流水马如龙"</span> <span class="token punctuation">,</span>                                              <span class="token string">"花月正春风"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              使用自定义的构造器来创建 HelloWorld 类的实例对象              并传入自定义的初始值              */</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">/*              输出：              多少恨              昨夜梦魂中               还似旧时游上苑               车如流水马如龙               花月正春风              */</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>一旦提供了自定义的构造器，系统就不再提供默认的构造器</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> String s1<span class="token punctuation">;</span>       <span class="token keyword">public</span> String s2<span class="token punctuation">;</span>       <span class="token keyword">public</span> String s3<span class="token punctuation">;</span>       <span class="token keyword">public</span> String s4<span class="token punctuation">;</span>       <span class="token keyword">public</span> String s5<span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">//自定义的第一个构造器，无参数</span>       <span class="token punctuation">{</span>        <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//自定义的第二个构造器，一个参数可变的形参</span>       <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>s1  <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>s2  <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>s3  <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>s4  <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>s5  <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>                                 <span class="token punctuation">{</span>              HelloWorld h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//通过第一个无参数构造器创建实例对象</span>              HelloWorld h2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token string">"多少恨"</span> <span class="token punctuation">,</span>                                              <span class="token string">"昨夜梦魂中"</span> <span class="token punctuation">,</span>                                              <span class="token string">"还似旧时游上苑"</span> <span class="token punctuation">,</span>                                              <span class="token string">"车如流水马如龙"</span> <span class="token punctuation">,</span>                                              <span class="token string">"花月正春风"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//通过第二个有参数构造器创建实例对象</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h1<span class="token punctuation">.</span>s1 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                   h1<span class="token punctuation">.</span>s2 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                   h1<span class="token punctuation">.</span>s3 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                   h1<span class="token punctuation">.</span>s4 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                   h1<span class="token punctuation">.</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/*             输出：             null             null             null             null             null             */</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h2<span class="token punctuation">.</span>s1 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                   h2<span class="token punctuation">.</span>s2 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                   h2<span class="token punctuation">.</span>s3 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                  h2<span class="token punctuation">.</span>s4 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                  h2<span class="token punctuation">.</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/*             输出：             多少恨             昨夜梦魂中              还似旧时游上苑              车如流水马如龙              花月正春风             */</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>构造器重载<ul><li>两同一不同<ul><li>同一个类</li><li>同一个类名</li><li>不同的形参列表</li></ul></li></ul></li><li>从而允许使用不同的构造器来初始化实例对象<ul><li>系统通过传入的实参列表来识别匹配</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> String s1<span class="token punctuation">;</span>       <span class="token keyword">public</span> String s2<span class="token punctuation">;</span>       <span class="token keyword">public</span> String s3<span class="token punctuation">;</span>       <span class="token keyword">public</span> String s4<span class="token punctuation">;</span>       <span class="token keyword">public</span> String s5<span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span>String s1 <span class="token punctuation">,</span> String s2<span class="token punctuation">)</span>              <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>s1  <span class="token operator">=</span> s1<span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>s2  <span class="token operator">=</span> s2<span class="token punctuation">;</span>                  <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span>String s1 <span class="token punctuation">,</span> String s2 <span class="token punctuation">,</span> String s3 <span class="token punctuation">,</span> String s4 <span class="token punctuation">,</span> String s5<span class="token punctuation">)</span>              <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">(</span>s1 <span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">/*              第三个构造器完全包含第二个构造器              通过 this 来调用第二个构造器里              s1 、s2 的初始化代码              */</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>s3  <span class="token operator">=</span> s3<span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>s4  <span class="token operator">=</span> s4<span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>s5  <span class="token operator">=</span> s5<span class="token punctuation">;</span>                     <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>                                 <span class="token punctuation">{</span>              HelloWorld h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              HelloWorld h2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token string">"浪花有意千里雪"</span> <span class="token punctuation">,</span>                                               <span class="token string">"桃花无言一队春"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              HelloWorld h3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token string">"浪花有意千里雪"</span> <span class="token punctuation">,</span>                                               <span class="token string">"桃花无言一队春"</span> <span class="token punctuation">,</span>                                             <span class="token string">"一壶酒"</span> <span class="token punctuation">,</span>                                               <span class="token string">"一竿身"</span> <span class="token punctuation">,</span>                                               <span class="token string">"快活如侬有几人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h1<span class="token punctuation">.</span>s1 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                   h1<span class="token punctuation">.</span>s2 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                   h1<span class="token punctuation">.</span>s3 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                   h1<span class="token punctuation">.</span>s4 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                   h1<span class="token punctuation">.</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/*             输出：             null             null             null             null             null             */</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h2<span class="token punctuation">.</span>s1 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                   h2<span class="token punctuation">.</span>s2 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                   h2<span class="token punctuation">.</span>s3 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                   h2<span class="token punctuation">.</span>s4 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                   h2<span class="token punctuation">.</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/*             输出：             浪花有意千里雪             桃花无言一队春             null             null             null             */</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h3<span class="token punctuation">.</span>s1 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                   h3<span class="token punctuation">.</span>s2 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                   h3<span class="token punctuation">.</span>s3 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                   h3<span class="token punctuation">.</span>s4 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>                                   h3<span class="token punctuation">.</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/*             输出：             浪花有意千里雪             桃花无言一队春             一壶酒             一竿身             快活如侬有几人             */</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>构造器 B 完全包含构造器 A</li><li>构造器 B 内部调用构造器 A<ul><li>构造器不能直接调用，构造器必须使用关键字 new 来调用<ul><li>但这会导致系统创建一个实例对象</li></ul></li><li>为了在构造器 B 内调用构造器 A 的初始化代码，且不会创建实例对象<ul><li>可以使用关键字 this </li><li>使用 this 调用另一个重载的构造器只能在构造器中使用</li><li>且必须作为构造器执行体内的第一条语句</li><li>系统会根据关键字 this 后面的括号内的实参，来匹配调用形参列表与之对应的构造器</li></ul></li></ul></li></ul><blockquote><p>软件开发的一个规则：不要把相同的代码段书写两次以上，以降低软件的维护成本</p></blockquote><h3 id="举例小结"><a href="#举例小结" class="headerlink" title="举例小结"></a>举例小结</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>     <span class="token keyword">public</span> String name<span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//定义 name 成员变量</span>     <span class="token keyword">public</span> <span class="token keyword">int</span>    age<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//定义 age  成员变量</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//定义 say  方法</span>    <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>            Person p；                          p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/*             定义一个 Person 类型的变量 p             通过 new 关键字调用 Person 类的构造器，返回一个 Person 类的实例             将该 Person 类的实例赋给 P 变量            还可以写成：            Person p = new Person();            */</span>            p<span class="token punctuation">.</span>name   <span class="token operator">=</span> <span class="token string">"李煜"</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//访问 p 的 name 实例变量，为之赋值</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出：李煜</span>            p<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"剪不断，理还乱，是离愁。别是一般滋味在心头。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/*             调用 p 的 say() 实例方法             为 say() 方法的形参赋值             输出：剪不断，理还乱，是离愁。别是一般滋味在心头。             */</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*注意源文件名必须是： Person.java*/</span></code></pre><ul><li>调用方法<ul><li>类.类变量</li><li>类.类方法</li><li>实例.实例变量</li><li>实例.实例方法</li></ul></li><li>static 修饰的方法和成员变量<ul><li>可以通过类或实例调用</li></ul></li><li>没有 static 修饰的方法和成员变量<ul><li>只能通过实例调用</li></ul></li></ul><h3 id="对象的this引用"><a href="#对象的this引用" class="headerlink" title="对象的this引用"></a>对象的this引用</h3><ul><li>this 关键字总是指向调用该方法的对象<ul><li>构造器中<ul><li>引用该构造器正在初始化的对象</li></ul></li><li>方法中<ul><li>引用调用该方法的对象</li></ul></li></ul></li><li>最大的作用：让类中的一个方法，访问该类中的另一个方法或实例变量</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//无 this</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//定义一个 jump() 方法</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"风回小院庭芜绿"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">"柳眼春相续"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//定义一个 run()  方法，需要用到 jump() 方法</span>       <span class="token punctuation">{</span>              Dog d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              d<span class="token punctuation">.</span><span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              jump() 方法没有使用 static 修饰              必须用实例（对象）来调用              因此创建了一个 Dog 类对象并赋给 Dog 类型的变量 d               用 d 来调用实例方法 jump()              */</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"凭阑半日独无言"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">"依旧竹声新月似当年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              Dog dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//创建了一个 Dog 类对象并赋给 Dog 类型的变量 dog              </span>              dog<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              输出：              风回小院庭芜绿              柳眼春相续              凭阑半日独无言              依旧竹声新月似当年              dog 的 run() 方法需要依赖 d 的 jump() 方法              不符合逻辑              */</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//用 this</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//定义一个 jump() 方法</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"风回小院庭芜绿"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">"柳眼春相续"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//定义一个 run()  方法，需要用到 jump() 方法</span>       <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              谁调用这个方法              this 就代表谁              且 this 只能代表当前类的实例              this 可以省略              */</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"凭阑半日独无言"</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">"依旧竹声新月似当年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              Dog dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//创建了一个 Dog 类对象并赋给 Dog 类型的变量 dog        </span>             dog<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/*             输出：             风回小院庭芜绿              柳眼春相续              凭阑半日独无言              依旧竹声新月似当年              this 代表 dog             */</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//无法从静态上下文中引用非静态的方法</span><span class="token comment" spellcheck="true">//public class Dog</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//定义一个 info() 方法</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无言独上西楼，月如钩。寂寞梧桐深院，锁清秋。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              main 用 static 修饰，为类方法              属于类，而不属于实例              因此调用 static 修的方法的主调总是类本身              info 未用 static 修饰，为实例方法              属于实例，而不属于类              因此必须使用实例（对象）来调用，系统相当于使用 this 作为该方法的主调              则此 this 无法引用有效的对象              所以 static 修饰的方法中不能使用 this 引用              因此编译错误输出：              无法从静态上下文中引用非静态的方法 info()              */</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span></code></pre><ul><li>作为调用该方法的对象的引用</li><li>调用 static 修饰的成员时省略了主调，默认使用该类作为主调</li><li>调用非 static 修饰的成员时省略了主调，默认使用 this 作为主调</li><li>小技巧<ul><li>看到对象调用 static 修饰的成员</li><li>把其当作假象</li><li>将其替换成用类来调用 static 修饰的成员</li></ul></li><li>如果确实需要在静态方法中访问另一个普通方法<ul><li>需要创建一个对象</li><li><code>new Dog().info()</code><ul><li>创建 Dog() 对象来调用 info() 方法</li><li>输出：无言独上西楼，月如钩。寂寞梧桐深院，锁清秋。</li></ul></li></ul></li><li>如果方法里有个局部变量和成员变量同名，程序又需要在该方法里访问这个被覆盖的成员变量<ul><li>则 this 不可省略</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">int</span> foo<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//创建一个 foo 成员变量</span>       <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//构造器名必须与类名 Dog 相同，且不能有返回值类型</span>       <span class="token punctuation">{</span>              <span class="token keyword">int</span> foo  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//构造器内定义一个 foo 局部变量</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/*              this 代表该构造器正在初始化的对象              且把对象的 foo 成员变量设置为18              此处 this 不可省略              因为有个成员变量名也为 foo              */</span>       <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              构造器返回的所有对象的 foo 成员变量              都等于18              输出：18              */</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>作为构造器初正在始化对象的引用</li><li>与普通方法类似，大部分时候在构造器内访问其他成员变量和方法时都可以省略 this 前缀<ul><li>不可省略 this 的情况如上</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建一个 age 成员变量</span>       <span class="token keyword">public</span> Dog <span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//定义一个 grow 方法，返回值为 Dog 类型</span>       <span class="token punctuation">{</span>              age<span class="token operator">++</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//age 成员变量值加1</span>              <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回调用该方法的对象</span>       <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              Dog d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              d<span class="token punctuation">.</span><span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              因为方法返回的是调用该方法的实例对象              所以可以连续调用同一个方法              */</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/*              输出：4              */</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>程序可以像访问普通变量一样访问 this 引用</li><li>甚至可以把 this 当成普通方法的返回值</li><li>返回的是调用该方法的实例对象</li></ul><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><blockquote><p>把该隐藏的隐藏，把该暴露的暴露</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>       <span class="token keyword">private</span> String name<span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">//Private 修饰的实例变量 name</span>       <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>                                           <span class="token comment" spellcheck="true">//Private 修饰的实例变量 age</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>                           <span class="token comment" spellcheck="true">//public 修饰的 setter </span>       <span class="token punctuation">{</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">6</span> <span class="token operator">||</span> name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您设置的人名不符合要求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>                <span class="token keyword">else</span>              <span class="token punctuation">{</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>                <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token comment" spellcheck="true">//public 修饰的 getter </span>       <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true">//public 修饰的 setter </span>       <span class="token punctuation">{</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">></span> <span class="token number">100</span> <span class="token operator">||</span> age <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您设置的额年龄不符合要求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">else</span>              <span class="token punctuation">{</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>              <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                        <span class="token comment" spellcheck="true">//public 修饰的 getter </span>       <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">/*       private 修饰的实例变量       public 修饰的 setter 方法       public 修饰的 getter 方法       符合 JavaBean 规范的类       JavaBean 总是一个封装良好的类       */</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              HelloWorld h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//h.age = 1000;        //实例变量 age 已被封装隐藏，所以此句会出现编译错误</span>              h<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//输出：您设置的年龄不符合要求</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//输出：0</span>              h<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//输出：30</span>              h<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"周邦彦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//输出：周邦彦</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>成员访问控制符<ul><li><code>private</code><ul><li>同一个类中</li></ul></li><li>default<ul><li>同一个类中</li><li>同一个包中的其他类</li></ul></li><li><code>protected</code><ul><li>同一个类中</li><li>同一个包中的其他类</li><li>不同包中的子类<ul><li>修饰方法：希望其子类来重写这个方法</li></ul></li></ul></li><li><code>public</code><ul><li>同一个类中</li><li>同一个包中的其他类</li><li>不同包中的子类</li><li>全局范围</li></ul></li></ul></li><li>局部变量的作用域就是它所在的方法，不可能被其他类访问，因此不能使用访问控制符</li><li>外部类<ul><li><code>public</code> <ul><li>可以被所有类使用</li></ul></li><li>default<ul><li>同一个包中的其他类</li></ul></li><li>因为外部类没有处于任何类的内部</li><li>也就没有所在类的内部、所在类的子类两个范围</li></ul></li><li>几个良好的建议：<ul><li>类里的绝大部分成员变量都应该使用 <code>private</code> 修饰</li><li>只有一些 <code>static</code> 、类似全局变量的成员变量，才能考虑使用 <code>public</code></li><li>工具方法（只用于辅助实现该类的其他方法）也应该使用 <code>private</code> 修饰</li><li>如果某个类只用做其他类的父类，该类的大部分方法可能希望被其子类重写，而不想被外界直接调用，则应该使用 <code>protected</code> 修饰</li><li>希望暴露出来给其他类自由调用的方法应该用 <code>public</code> 修饰</li><li>类的构造器应该使用 <code>public</code> 修饰，从而允许在其他地方创建该类的实例<ul><li>业务需要<ul><li><code>protected</code><ul><li>主要用于被其子类调用</li></ul></li><li><code>private</code><ul><li>阻止其他类创建该类的实例</li></ul></li></ul></li></ul></li><li>外部类应该使用 <code>public</code> 修饰，因为外部类通常都希望被其他类自由使用</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Foundation </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Foundation.B</title>
      <link href="/2018/10/04/Java-Foundation-B/"/>
      <url>/2018/10/04/Java-Foundation-B/</url>
      
        <content type="html"><![CDATA[<h1 id="Three-Questions-Before-Embarking-On-A-trip-To-Java"><a href="#Three-Questions-Before-Embarking-On-A-trip-To-Java" class="headerlink" title="Three Questions Before Embarking On A trip To Java"></a>Three Questions Before Embarking On A trip To Java</h1><blockquote><h4 id="为什么要用这些技术"><a href="#为什么要用这些技术" class="headerlink" title="为什么要用这些技术"></a>为什么要用这些技术</h4></blockquote><blockquote><h4 id="用这些技术有什么好处"><a href="#用这些技术有什么好处" class="headerlink" title="用这些技术有什么好处"></a>用这些技术有什么好处</h4></blockquote><blockquote><h4 id="如果不用这些技术行不行"><a href="#如果不用这些技术行不行" class="headerlink" title="如果不用这些技术行不行"></a>如果不用这些技术行不行</h4></blockquote><hr><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">5</span>   <span class="token operator">%</span>  <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//输出：NaN</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span>   <span class="token operator">%</span>  <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//输出：NaN</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5.0</span>  <span class="token operator">%</span>  <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//输出：NaN</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5.0</span> <span class="token operator">%</span>  <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//输出：NaN</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0</span>    <span class="token operator">%</span>  <span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//输出：0.0</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0</span>    <span class="token operator">%</span>  <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//输出：NaN</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">5</span>   <span class="token operator">%</span>  <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//输出：ArithmeticException：/by zero</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span>   <span class="token operator">%</span>  <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//输出：ArithmeticException：/by zero</span></code></pre><ul><li><code>+</code> <ul><li>加</li></ul></li><li><code>-</code> <ul><li>减</li></ul></li><li><code>*</code> <ul><li>乘</li></ul></li><li><code>/</code> <ul><li>除</li></ul></li><li><code>%</code> <ul><li>求余</li></ul></li><li><code>++</code> <ul><li>自加</li><li>单目运算符</li><li>只能操作一个操作数</li><li>只能操作单个数值型的变量</li><li>不能操作常量或表达式</li><li>左边：先加1，后运算</li><li>右边：先运算，后加1</li></ul></li><li><code>--</code> <ul><li>自减</li><li>单目运算符</li><li>只能操作一个操作数</li><li>只能操作单个数值型的变量</li><li>不能操作直接量、常量或表达式</li><li>左边：先减1，后运算</li><li>右边：先运算，后减1</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">double</span>  a1 <span class="token operator">=</span> <span class="token number">3.2</span><span class="token punctuation">;</span>                   <span class="token keyword">double</span>  a2 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>a1 <span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//a1 的5次方</span><span class="token keyword">double</span>  a3 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//a1 开平方</span><span class="token keyword">double</span>  a4 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">1.57</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.57 的 sin 函数值 ，1.57被当成弧度数，弧度数/π=角度数/180 </span><span class="token keyword">double</span>  a5 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//随机生成一个0.0 ~ 1.0之间的伪随机数</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出：3.2</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出：3.2 ^ 5 = 335.5443200000001</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出：1.7888543819998317</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出：0.9999996829318346</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a5<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出：随机输出</span></code></pre><ul><li>java.lang.Math 类工具</li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li><code>=</code><ul><li>左边只能是变量</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>     b1 <span class="token operator">=</span> b1 <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/*右边表达式中的5默认为 int 类型a + 5 就是 int 类型把 int 类型赋给 byte 类型错误*/</span><span class="token keyword">byte</span> b2  <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>     b2 <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出:10</span></code></pre><ul><li>扩展后的赋值运算符<ul><li><code>+=</code></li><li><code>-=</code></li><li><code>*=</code></li><li><code>/=</code></li><li><code>%=</code></li><li><code>&amp;=</code></li><li><code>|=</code></li><li><code>^=</code></li><li><code>&lt;&lt;=</code></li><li><code>&gt;&gt;=</code></li><li><code>&gt;&gt;&gt;=</code></li></ul></li><li>b = b + 5 和 b += 5 <ul><li>表面上运行结果相同</li><li>但底层的运行机制还是存在一定差异</li><li>推荐使用这类扩展后的赋值运算符</li><li>具有更好的性能</li><li>程序会更加健壮</li></ul></li></ul><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&amp;</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//输出：1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">|</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//输出：13</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">~</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出：4</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">^</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//输出：12</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出：-20</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出：-2</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span> <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出：1073741822</span></code></pre><ul><li><code>&amp;</code> <ul><li>按位与</li><li>两位同时为1，才返回1</li></ul></li><li><code>|</code><ul><li>按位或</li><li>有位个为1，就返回1</li></ul></li><li><code>~</code><ul><li>按位非</li><li>单目运算符</li><li>将操作数的每个位（包括符号位）全部取反</li></ul></li><li><code>^</code><ul><li>按位异或</li><li>两位不同，返回1</li><li>两位相同，返回0</li></ul></li><li><code>&lt;&lt;</code><ul><li>左移运算符</li><li>右边空出来的以0补充</li></ul></li><li><code>&gt;&gt;</code><ul><li>右移运算符</li><li>左边空出来的以符号位数字补充</li></ul></li><li><code>&gt;&gt;&gt;</code><ul><li>无符号右移运算符</li><li>左边空出来的以0补充</li></ul></li><li>对于 byte 、short 、char，先自动升级为 int 类型后再移位</li><li>int 类型：a &gt;&gt; b<ul><li>b &gt; 32</li><li>系统先用 b 对32求余</li><li>得到结果为移位数</li><li>a &gt;&gt; 33 = a &gt;&gt; 1</li></ul></li><li>long 类型：a &gt;&gt; b<ul><li>b &gt; 64</li><li>系统先用 b 对64求余</li><li>得到的结果为移位数</li><li>a &gt;&gt; 65 = a &gt;&gt; 1</li></ul></li><li>进行移位运算不会改变操作数本身<ul><li>只是得到了一个移位运算后的值</li><li>原来的操作数本身不会发生改变</li></ul></li></ul><p><img src="https://i.loli.net/2018/10/04/5bb56f8b769d3.jpg" alt="4"></p><p><img src="https://i.loli.net/2018/10/04/5bb56fc4d0483.jpg" alt="5"></p><p><img src="https://i.loli.net/2018/10/04/5bb5709adc503.jpg" alt="6"></p><p><img src="https://i.loli.net/2018/10/04/5bb56ff53e0c0.jpg" alt="7"></p><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><pre class=" language-java"><code class="language-java">HelloWorld c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>HelloWorld c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>HelloWorld c3 <span class="token operator">=</span> c1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*创建两个 HelloWorld 对象分别赋给 c1 、c2 两个引用c1 、c2 是同一个类的两个对象的引用所以可以比较但 c1 、c2 引用不同的对象所以返回 false直接将 c1 的值赋给 c3c1 、c3 指向同一个对象所以返回 true*/</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span>    <span class="token operator">></span>   <span class="token number">4.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//输出：true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span>    <span class="token operator">==</span>  <span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//输出：true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">97</span>   <span class="token operator">==</span>  <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//输出：true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">==</span>  <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出：false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1   <span class="token operator">==</span>  c2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//输出：false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1   <span class="token operator">==</span>  c3<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//输出：true</span></code></pre><ul><li><code>&gt;</code><ul><li>数值类型</li></ul></li><li><code>&gt;=</code><ul><li>数值类型</li></ul></li><li><code>&lt;</code><ul><li>数值类型</li></ul></li><li><code>&lt;=</code><ul><li>数值类型</li></ul></li><li><code>==</code><ul><li>数值类型</li><li>boolean 类型<ul><li>true == false 返回 false</li></ul></li><li>引用类型<ul><li>必须具有父子关系</li><li>两个引用必须指向同一个对象才会返回 true</li></ul></li></ul></li><li><code>!=</code><ul><li>数值类型</li><li>引用类型<ul><li>必须具有父子关系</li><li>两个引用只要指向不同的对象就会返回 true</li></ul></li></ul></li><li>基本类型不能和引用类型进行 == 的比较</li><li>boolean 类型不能和任何类型进行 == 的比较</li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> <span class="token string">'6'</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//输出：true</span><span class="token comment" spellcheck="true">/*5 > 3 返回 true'6' 的 ASCII 码值为 5454 > 10 返回 true求与后返回 true*/</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">^</span>  <span class="token string">'c'</span> <span class="token operator">></span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//输出：true</span><span class="token comment" spellcheck="true">/*4 > 5 返回 false'c' > 'a' 返回 true求异或后返回 true*/</span><span class="token keyword">int</span> d1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> d2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>d1 <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">|</span> d2<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true">//不短路</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//输出：5，11</span><span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/*在确认 d1 > 4整个表达式返回 true 之后d2++ 得到了运算*/</span><span class="token keyword">int</span> d3 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> d4 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>d3 <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">||</span> d4<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">//短路</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d3 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> d4<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//输出：5，10</span><span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/*在确认 d3 > 4整个表达式返回 true 之后d4++ 没有得到运算*/</span><span class="token comment" spellcheck="true">/*&amp; 与 &amp;&amp; 同上类似&amp; 会计算左右两边的操作数&amp;&amp; 先计算左边的操作数确认为 false 则直接返回 false 根本不会计算右边的操作数*/</span></code></pre><ul><li><code>&amp;&amp;</code><ul><li>与</li><li>两个操作数都是 true ，返回 true</li></ul></li><li><code>&amp;</code><ul><li>不短路与</li><li>作用与 &amp;&amp; 相同</li><li>但不会短路</li></ul></li><li><code>||</code><ul><li>或</li><li>两个操作数只要有一个 true，返回 true</li></ul></li><li><code>|</code><ul><li>不短路或</li><li>作用与 || 相同</li><li>但不会短路</li></ul></li><li><code>!</code><ul><li>非</li><li>单目运算符</li><li>! true  = false</li><li>! false = true</li></ul></li><li><code>^</code><ul><li>异或</li><li>两个操作数不同，返回 true</li><li>两个操作数相同，返回 false</li></ul></li></ul><h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span>    e1 <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token keyword">double</span> e2 <span class="token operator">=</span> <span class="token number">11.0</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e1 <span class="token operator">></span> e2 <span class="token operator">?</span> <span class="token string">"e1 大于 e2"</span> <span class="token operator">:</span><span class="token punctuation">(</span>e1 <span class="token operator">&lt;</span> e2 <span class="token operator">?</span> <span class="token string">"e1 小于 e2"</span> <span class="token operator">:</span> <span class="token string">"e1 等于 e2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*输出：e1 = e2*/</span></code></pre><ul><li><code>(expression) ? if-true-statement : if-false-statement</code><ul><li>先对逻辑表达式 expression 求值<ul><li>返回 true<ul><li>则返回第二个操作数的值</li></ul></li><li>返回 false<ul><li>则返回第三个操作数的值</li></ul></li></ul></li></ul></li><li>三目运算符是 if else 的精简写法<ul><li>三目运算符不支持多个语句</li><li>if else 后的代码块可以有多个语句</li></ul></li><li>三目运算符可以嵌套<ul><li>以处理更复杂的情况</li></ul></li></ul><h3 id="运算符的结合性和优先级"><a href="#运算符的结合性和优先级" class="headerlink" title="运算符的结合性和优先级"></a>运算符的结合性和优先级</h3><ul><li>结合性<ul><li>Java 中大部分运算符是从左向右结合</li><li>从右向左结合<ul><li>单目运算符</li><li>赋值运算符</li><li>三目运算符<ul><li><code>a?b:c?d:e?f:g</code> = <code>a?b:(c?d:(e?f:g))</code>.</li></ul></li></ul></li><li><code>+</code> 和 <code>-</code> 是两个可结合的运算<ul><li>互换位置不会影响结果</li></ul></li></ul></li><li>优先级<ul><li>源代码就是一份文档：<ul><li>源代码的可读性比运行效率更重要</li><li>不要把一个表达式写得过于复杂</li><li>不要过多地依赖运算符的优先级来控制表达式的执行顺序</li><li>尽量使用 <code>()</code></li></ul></li></ul></li></ul><hr><h1 id="流程控制结构"><a href="#流程控制结构" class="headerlink" title="流程控制结构"></a>流程控制结构</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>1966年，计算机科学家 Bohm 和 Jacopini 证明了任何简单或复杂的算法都可以由下列三种基本结构组合而成：<ul><li>顺序结构：按照源代码中的排列顺序从上到下依次执行</li><li>选择结构：单选，双选，多选</li><li>循环结构：当型（先判断后执行），直到型（先执行后判断）</li></ul></li></ul><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span>    a<span class="token operator">--</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//if 语句唯一的条件执行体</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a 大于4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//已经不属于 if 语句的条件执行体</span><span class="token keyword">else</span>                                <span class="token comment" spellcheck="true">//没有 if 语句对应，从而引起编译错误</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a 小于4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>若没有 <code>{ }</code> 则 <code>if</code> 条件语句只控制到紧跟该条件语句的第一个分号处</li><li>即使只有一行代码，也推荐加上花括号 <code>{ }</code> </li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> age1 <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>age1 <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"青年人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age1 <span class="token operator">></span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中年人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age1 <span class="token operator">></span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老年人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                                      <span class="token comment" spellcheck="true">//最后的 else 也可以省略</span><span class="token comment" spellcheck="true">/*输出：青年人实际上希望判断45岁是中年人表面上看起来 else 后面没有条件或者 else if 后面只有一个条件但真相是else 本身就是一个条件else 隐含的条件就是对前面条件的取反所以上面的三个条件实际上对应    1.age1 > 20  =  age1 > 20    2.age1 > 40  =  age1 > 40 &amp;&amp; !(age1 > 20)    3.age1 > 60  =  age1 > 60 &amp;&amp; !(age1 > 40) &amp;&amp; !(age1 > 40 &amp;&amp; !(age1 > 20))条件2和条件3永远不可能发生*/</span><span class="token keyword">int</span> age2 <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>age2 <span class="token operator">></span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"青年人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age2 <span class="token operator">></span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中年人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age2 <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老年人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/*输出：中年人上面的三个条件实际上对应    1.age2 > 60  =  age2 > 60      -年龄大于60    2.age2 > 40  =  age2 > 40 &amp;&amp; !(age2 > 60)      -年龄大于40，且小于60    3.age2 > 20  =  age2 > 20 &amp;&amp; !(age2 > 60) &amp;&amp; !(age2 > 40 &amp;&amp; !(age2 > 60))      -年龄大于20，且小于40*/</span></code></pre><ul><li>使用 <code>if...else</code> 语句时的一条基本规则<ul><li>总是优先把包含范围小的条件放在前面处理</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">;</span>String season <span class="token operator">=</span> <span class="token string">"夏天"</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>season<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"春天"</span><span class="token operator">:</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"夏天"</span><span class="token operator">:</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"秋天"</span><span class="token operator">:</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"冬天"</span><span class="token operator">:</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"冬雪皑皑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"季节输入错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*输出：夏日炎炎*/</span></code></pre><ul><li><code>switch</code><ul><li>控制表达式的数据类型只能是<ul><li>byte 、short 、char 、int</li><li>枚举 enum</li><li>java.lang.String<ul><li>Java 7 以上版本</li></ul></li></ul></li><li>可以省略 case 后面的 <code>{ }</code></li><li>default 和 else 类似<ul><li>看似没有条件其实有隐含条件</li><li>即 switch 括号内表达式的值不能与前面任何一个 case 标签后的值相等</li></ul></li><li>没有 <code>break;</code> <ul><li>则会从匹配到的第一个 case 开始一路向下执行</li><li>不再判断 case 和 default</li><li>直到遇到 break 结束</li></ul></li></ul></li></ul><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"循环结束！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*输出：1 ~ 9循环结束！*/</span></code></pre><ul><li><code>while</code><ul><li>先判断，后执行</li><li>如果省略了循环体的花括号 <code>{ }</code></li><li>那么 while 循环条件仅仅控制到跟进该循环条件的第一个分号处</li><li>例如循环体部分和迭代语句合并在一起</li><li>但通常建议加上花括号</li><li>两个陷阱<ul><li>死循环<ul><li>循环条件一直为 true</li></ul></li><li>while 循环条件后紧跟一个分号 <code>;</code><ul><li>一个单独的分号 <code>;</code> 表示一个空语句</li><li>不做任何事的空语句</li><li>这意味着循环体是空语句</li><li>同时循环条件的返回值没有任何改变</li><li>也成了一个死循环</li></ul></li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"循环结束！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*输出：1 ~ 9循环结束！*/</span></code></pre><ul><li><code>do while</code><ul><li>先执行，后判断</li><li>do while 循环至少执行一次</li><li>do while 的循环条件后必须有一个 <code>;</code><ul><li>表明循环结束</li></ul></li><li>循环体部分和迭代语句合并在一起，可以省略 <code>{ }</code> <ul><li>但通常建议加上花括号</li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> count <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"循环结束！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*输出：1 ~ 9循环结束！*/</span><span class="token keyword">int</span> outcount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//此处 outcount 必须初始化，否则会产生编译错误</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> incount <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> incount <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> incount<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>incount<span class="token punctuation">)</span><span class="token punctuation">;</span>    outcount <span class="token operator">=</span> incount<span class="token punctuation">;</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"循环结束！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>outcount<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//此处 outcount 在循环之前必须初始化，否则会产生编译错误</span><span class="token comment" spellcheck="true">/*输出：1 ~ 9循环结束！9可以使用一个循环之外的变量来保存循环变量 incount 的值若将循环变量 incount 定义在循环之前作用域扩大了但如果该方法还有另一个循环也需要定义循环变量将不能再次使用之前的循环变量 incount推荐使用 i 、j 、k 来作为循环变量*/</span></code></pre><ul><li><code>for</code><ul><li>更加简洁</li><li>可以代替 while 、do while 循环语句</li><li>循环条件总比循环体要多执行一次</li><li>循环迭代语句与循环体分离<ul><li>可无视 continue 的作用</li></ul></li><li>如果循环体只有一行，可省略花括号 <code>{ }</code><ul><li>但通常建议加上花括号</li></ul></li><li>初始化语句<ul><li>单个初始化</li><li>多个初始化<ul><li>必须是相同的数据类型，即只能有一个声明语句</li></ul></li></ul></li><li>循环条件<ul><li>boolean 表达式</li><li>包含逻辑运算符的表达式</li></ul></li><li>建议不要在循环体内修改循环变量（即循环计数器）的值</li><li>初始化语句、循环条件、迭代语句<ul><li>都可以省略</li><li>省略循环条件，循环条件默认为 true，会变成一个死循环</li></ul></li><li>for 循环里定义的变量<ul><li>作用域仅在循环体内有效</li><li>for 循环结束后，这些变量将不可访问</li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        k <span class="token operator">=</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">'\t'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*输出：乘法口诀*/</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> j1 <span class="token operator">&lt;</span> n <span class="token operator">-</span> i <span class="token punctuation">;</span> j1<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j2 <span class="token operator">=</span> <span class="token number">0</span>  <span class="token punctuation">;</span> j2 <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span> j2<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"￥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">*</span>输出：    <span class="token operator">*</span>   <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>  <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span></code></pre><h3 id="控制循环结构"><a href="#控制循环结构" class="headerlink" title="控制循环结构"></a>控制循环结构</h3><pre class=" language-java"><code class="language-java">outer<span class="token operator">:</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token keyword">break</span> outer<span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*输出：0 ，00 ，1break 将结束标签 outer 标识的循环体*/</span></code></pre><ul><li><code>break</code><ul><li>完全结束一个循环</li><li>开始执行循环之后的代码</li><li>标签<ul><li>一个紧跟着英文冒号 <code>:</code> 的标识符</li><li>break 后面紧跟一个标签，可以直接结束标签所标识的循环</li><li>有效性<ul><li>在 break 语句所在的循环之前定义<ul><li>但就没有了标签的意义</li><li>因为 break 语句默认就是结束其本身所在的循环</li></ul></li><li>或者在 break 语句所在的循环的外层循环之前定义</li></ul></li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java">outer<span class="token operator">:</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token keyword">continue</span> outer<span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*输出：0 ，01 ，02 ，03 ，04 ，0每当内层循环变量 j == 0continue 将结束标签 outer 标识的循环体的本次循环循环变量 j 无法超越 0*/</span></code></pre><ul><li><code>continue</code><ul><li>直接结束本次循环中 continue 之后的代码</li><li>直接开始下一次循环</li><li>如果把 continue 放在循环体最后一句，就没有了意义</li><li>标签<ul><li>一个紧跟着英文冒号 <code>:</code> 的标识符</li><li>可以直接跳过标签所标识的循环的当前循环，重新开始下一次循环</li><li>有效性<ul><li>在 continue 语句所在的循环之前定义<ul><li>但就没有了标签的意义</li><li>因为 continue 语句默认就是结束其本身所在的循环的本次循环</li></ul></li><li>或者在 continue 语句所在的循环的外层循环之前定义</li></ul></li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*输出：01当 main 方法结束时，也就是 Java 程序结束时*/</span></code></pre><ul><li><code>return</code><ul><li>return 不是专门用于结束循环的</li><li>其功能是结束一个方法</li><li>当一个方法执行到 return 语句时将被结束</li><li>Java 中大部分循环都是放在方法中执行的</li><li>一旦在循环体内执行到 return 语句，return 语句就会结束该方法<ul><li>循环自然也就结束了</li></ul></li><li>和 break 、continue 不同<ul><li>return 直接结束整个方法</li><li>不管这个 return 处于多少层循环中</li></ul></li></ul></li></ul><hr><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h3 id="理解数组"><a href="#理解数组" class="headerlink" title="理解数组"></a>理解数组</h3><ul><li>一个数组中，数组元素的类型是唯一的</li><li>一旦数组初始化完成，数组在内存中所占的空间将被固定下来，数组的长度不可改变</li><li>即使把数组元素的数据清空，其所占空间依然被保留，长度依然不变</li><li>数组既可以存储基本类型的数据，也可以存储引用类型的数据</li><li>数组本身也是一种引用类型</li></ul><h3 id="定义和初始化数组"><a href="#定义和初始化数组" class="headerlink" title="定义和初始化数组"></a>定义和初始化数组</h3><ul><li><p>定义数组的两种方式</p><ul><li><code>type[] arrayName</code></li><li><code>type arrayName[]</code></li><li>推荐使用第一种方式，更加直观清晰<ul><li>arrayName 是变量名</li><li>type[]    是变量类型</li></ul></li></ul></li><li><p>定义数组时不能指定数组的长度，因为这个引用类型的变量还未指向任何有效的内存</p></li><li><p>Java 中的数组必须先初始化，才能使用</p><ul><li><p>即为数组的数组元素分配内存空间</p></li><li><p>并必须为每个数组元素赋初始值</p></li></ul></li></ul><pre class=" language-java"><code class="language-java">type<span class="token punctuation">[</span><span class="token punctuation">]</span> arrayNamearrayName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>element1 <span class="token punctuation">,</span> element2 <span class="token punctuation">,</span> element3 <span class="token punctuation">,</span> element4 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>type<span class="token punctuation">[</span><span class="token punctuation">]</span> arrayName <span class="token operator">=</span> <span class="token punctuation">{</span>element1 <span class="token punctuation">,</span> element2 <span class="token punctuation">,</span> element3 <span class="token punctuation">,</span> element4 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">5</span> <span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> b1<span class="token punctuation">;</span>b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"晚来天欲雪，"</span> <span class="token punctuation">,</span> <span class="token string">"能饮一杯无。"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> b2<span class="token punctuation">;</span>b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"晚来天欲雪，"</span> <span class="token punctuation">,</span> <span class="token string">"能饮一杯无。"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*String 类型是 Object 类型的子类子类的实例是一种特殊的父类实例即字符串是一种特殊的 Object 实例*/</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span> <span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>静态初始化<ul><li>由程序员显式分配每个数组元素的初始值，由系统决定数组的长度</li><li>new 关键字后面的 type 就是定义数组时所使用的 type 类型，也可以是定义数组时所指定的 type 类型的子类</li><li>数组元素值必须和 new 关键字后面的 type 类型相同，或者是其子类的实例</li></ul></li></ul><pre class=" language-java"><code class="language-java">type<span class="token punctuation">[</span><span class="token punctuation">]</span> arrayNamearrrayName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">type</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span>type<span class="token punctuation">[</span><span class="token punctuation">]</span> arrayName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">type</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义和初始化同时完成</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义和初始化同时完成</span></code></pre><ul><li><p>动态初始化</p><ul><li>由程序员指定数组的长度，由系统为数组元素分配初始值</li><li><p>需要指定一个 int 类型的 length</p></li><li><p>length 指定了数组的长度，也就是可容纳数组元素的个数</p></li><li><p>new 关键字后面的 type 就是定义数组时所使用的 type 类型，也可以是定义数组时所指定的 type 类型的子类</p><ul><li><p>系统按如下规则分配初始值</p><ul><li>byte 、short 、int 、long<ul><li>0</li></ul></li><li>float 、double<ul><li>0.0</li></ul></li><li>char<ul><li>‘\u0000’</li></ul></li><li>boolean<ul><li>false</li></ul></li><li>类、接口和数组<ul><li>null</li></ul></li></ul></li></ul></li></ul></li><li><p>不要同时使用静态初始化和动态初始化</p><ul><li>即不要同时指定数组长度且为每个数组元素分配初始值</li></ul></li></ul><h3 id="使用数组"><a href="#使用数组" class="headerlink" title="使用数组"></a>使用数组</h3><pre class=" language-java"><code class="language-java">Object<span class="token punctuation">[</span><span class="token punctuation">]</span> b1<span class="token punctuation">;</span>b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"晚来天欲雪，"</span> <span class="token punctuation">,</span> <span class="token string">"能饮一杯无。"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//输出：能饮一杯无</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> b1<span class="token punctuation">;</span>b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"晚来天欲雪，"</span> <span class="token punctuation">,</span> <span class="token string">"能饮一杯无。"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>b1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"此情无计可消除"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//为数组 b1 的第二个元素赋值</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//输出：此情无计可消除</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> b1<span class="token punctuation">;</span>b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"晚来天欲雪，"</span> <span class="token punctuation">,</span> <span class="token string">"能饮一杯无。"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*异常：java.lang.ArrayIndexOutOfBoundsException：Index 5 out of bounds for length 2*/</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">5</span> <span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*输出：56820*/</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>       <span class="token operator">=</span> <span class="token string">"被酒莫惊春睡重"</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>       <span class="token operator">=</span> <span class="token string">"赌书消得泼茶香"</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>       <span class="token operator">=</span> <span class="token string">"当时只道是寻常"</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*输出：null被酒莫惊春睡重赌书消得泼茶香当时只道是寻常*/</span></code></pre><ul><li>Java 数组的索引从0开始</li><li>最后一个元素的索引为数组长度减1</li><li>每个数组都提供有一个 length 属性</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>type variableName <span class="token operator">:</span> arrayName <span class="token operator">|</span> collection<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>variableName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> poems <span class="token operator">=</span> <span class="token punctuation">{</span>                   <span class="token string">"红豆生南国"</span><span class="token punctuation">,</span>                   <span class="token string">"春来发几枝"</span><span class="token punctuation">,</span>                   <span class="token string">"愿君多采撷"</span><span class="token punctuation">,</span>                   <span class="token string">"此物最相思"</span><span class="token punctuation">,</span>                 <span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>String poem <span class="token operator">:</span> poems<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">//形参 poem 将自动迭代遍历每个数组元素</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>poem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*输出：红豆生南国春来发几枝愿君多采撷此物最相思*/</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> poems <span class="token operator">=</span> <span class="token punctuation">{</span>                   <span class="token string">"红豆生南国"</span><span class="token punctuation">,</span>                   <span class="token string">"春来发几枝"</span><span class="token punctuation">,</span>                   <span class="token string">"愿君多采撷"</span><span class="token punctuation">,</span>                   <span class="token string">"此物最相思"</span><span class="token punctuation">,</span>                 <span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>String poem <span class="token operator">:</span> poems<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">//形参 poem 将自动迭代遍历每个数组元素</span><span class="token punctuation">{</span>     poem <span class="token operator">=</span> <span class="token string">"红豆生南国"</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>poem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*输出：红豆生南国红豆生南国红豆生南国红豆生南国给循环变量 poem 赋值虽然语法上可行但没有意义且会引起错误循环变量 poem 相当于一个临时变量系统会把数组元素依次赋给这个临时变量这个临时变量不是数组元素它只是保存了数组元素的值如果希望改变数组元素的值则不应该用 foreach 循环*/</span></code></pre><ul><li><code>foreach</code></li><li>无需获得数组（或集合）的长度即可遍历数组（或集合）</li><li>无需根据索引来访问数组元素（或集合元素）</li><li>无需循环条件、无需迭代语句</li><li>由系统自动完成</li><li>循环过程中不会改变数组元素的值<ul><li>不要对 foreach 的循环变量赋值</li></ul></li></ul><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Foundation </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Foundation.A</title>
      <link href="/2018/10/02/Java-Foundation-A/"/>
      <url>/2018/10/02/Java-Foundation-A/</url>
      
        <content type="html"><![CDATA[<h1 id="Three-Questions-Before-Embarking-On-A-trip-To-Java"><a href="#Three-Questions-Before-Embarking-On-A-trip-To-Java" class="headerlink" title="Three Questions Before Embarking On A trip To Java"></a>Three Questions Before Embarking On A trip To Java</h1><blockquote><h4 id="为什么要用这些技术"><a href="#为什么要用这些技术" class="headerlink" title="为什么要用这些技术"></a>为什么要用这些技术</h4></blockquote><blockquote><h4 id="用这些技术有什么好处"><a href="#用这些技术有什么好处" class="headerlink" title="用这些技术有什么好处"></a>用这些技术有什么好处</h4></blockquote><blockquote><h4 id="如果不用这些技术行不行"><a href="#如果不用这些技术行不行" class="headerlink" title="如果不用这些技术行不行"></a>如果不用这些技术行不行</h4></blockquote><hr><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h3 id="J2SE"><a href="#J2SE" class="headerlink" title="J2SE"></a>J2SE</h3><ul><li>整个Java技术的核心和基础，是J2ME和J2EE编程的基础，也是本系列博文教程主要介绍的内容</li></ul><h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><ul><li>先编译，后解释<ul><li><em>.java 源文件 —&gt;（编译）—&gt; </em>.class 字节码文件 —&gt;（解释执行）—&gt; 特定平台的机器码</li></ul></li></ul><p><img src="https://i.loli.net/2018/10/02/5bb34fbfc7367.jpg" alt="1"></p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul><li>JDK（Java SE Development Kit）：Java 标准版开发包</li><li>JRE（Java Runtime Environment）：Java 运行环境，包含于 JDK ，无需单独下载</li><li>JVM（Java Virtual Machine）： Java 虚拟机，包含于JRE，运行 Java 字节码文件，分为向上和向下两个部分，向上供给  Java 字节码文件完全相同的接口，向下适用不同平台的接口，实现 Java 程序的平台无关性</li><li>Oracle 于2009年收购了 Sun ，所以请直接到 Oracle 官网下载：<ul><li><font size="5"><a href="https://www.oracle.com/index.html" target="_blank" rel="noopener">Latest version JDK download </a></font></li></ul></li><li>安装配置过程：<ul><li>不建议安装在有空格的路径下，例如 C:\Program Files，可能会导致一些未知的问题</li><li>我的电脑 —&gt; 属性 —&gt; 高级系统设置 —&gt; 环境变量 —&gt; 系统变量 —&gt; 添加：<ol><li>JAVA_HOME：JDK安装路径</li><li>Path：<code>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</code></li><li>CLASSPATH：<code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code></li><li>通常建议也添加一个 PATH 用户变量：<code>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</code></li><li>JDK1.5 以上的版本无需设置 CLASSPATH</li><li>CLASSPATH 前面有个关键性的 <code>.</code> ，用以强制 Java 解释器在当前路径下搜索 Java 类</li><li>多一个空格或少一个空格，都可能引起错误哟</li></ol></li></ul></li></ul><h3 id="IDE（Integrated-Development-Environment）"><a href="#IDE（Integrated-Development-Environment）" class="headerlink" title="IDE（Integrated Development Environment）"></a>IDE（Integrated Development Environment）</h3><blockquote><p>If you’re nothing without the IDE , then you shouldn’t have it.</p></blockquote><ul><li>如果你离不开这个 IDE 工具，那么你就不值得使用这个 IDE 工具</li><li>如果你不清楚这个 IDE 工具里每一个菜单、按钮……的底层细节，那么你就不值得使用这个 IDE 工具</li><li>Windows 系统上可用NotePad（记事本）、NotePad++<ul><li>不要用写字板、Word 等工具，这些工具包含一些隐藏的格式化字符，会导致程序无法正常编译、运行</li></ul></li><li>教学任务推荐：<ul><li><font size="5"><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ IDEA</a></font></li><li>比 Eclipse 更强大美观，一款让你爱上 Java 编程的 IDE 工具</li><li>可自由定制自己喜欢的风格</li><li>学生邮箱（@njtech.edu.cn）注册，旗舰版免费使用1年，可无限续期（只要还是学生）</li></ul></li></ul><hr><h1 id="最简单的和最著名的程序"><a href="#最简单的和最著名的程序" class="headerlink" title="最简单的和最著名的程序"></a>最简单的和最著名的程序</h1><h3 id="最简单的-Java-程序"><a href="#最简单的-Java-程序" class="headerlink" title="最简单的 Java 程序"></a>最简单的 Java 程序</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>类（class）是 Java 最小的程序单位<ul><li>不允许可执行性语句、方法等成分独立存在</li><li>所有程序部分都必须放在类定义里</li><li>这里仅包含一个空类的定义</li></ul></li></ul><h3 id="最著名的-Java-程序"><a href="#最著名的-Java-程序" class="headerlink" title="最著名的 Java 程序"></a>最著名的 Java 程序</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>       <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>mian 方法是 Java 程序的入口<ul><li>main 方法的写法几乎是固定的<ul><li>必须使用 <code>public</code> 和 <code>static</code> 来修饰，这两个修饰符的位置可以互换</li><li>必须使用 <code>void</code> 声明返回值</li><li>必须是 <code>(String[] args)</code> 字符串数组类型的形参值</li></ul></li><li>对于那些不包含 main 方法的类<ul><li>也是有用的类</li><li>一个大型的 Java 程序往往只需要一个 main 入口，即只有一个类包含 main 方法</li><li>其他类都是用于被 main 方法直接或间接调用</li></ul></li></ul></li></ul><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ul><li>将以上两个程序输出为 *.java 源文件<ul><li>源文件命名规则：<ul><li>扩展名必须是 .java</li><li>一个 Java 源文件可以有多个类定义，但 public 类最多只能定义一个</li><li>若包含 public 类定义，则源文件名必须与 public 类的类名相同</li><li>两个良好的建议：<ul><li>一个 Java 源文件只定义一个类</li><li>让源文件的主文件名与 public 类同名</li></ul></li></ul></li></ul></li><li>在源文件所在路径下的命令行窗口（cmd） 中编译、解释执行：<ul><li><code>javac *.java</code></li><li><code>java Java类名</code></li></ul></li><li>空类可以被 javac 编译通过，但不可被 java 解释执行<ul><li>并不代表这个类是错的</li><li>java 解释器规定：<ul><li>如需某个类能被解释器直接解释执行，则这个类里必须包含 main 方法</li></ul></li></ul></li></ul><h3 id="注意要点"><a href="#注意要点" class="headerlink" title="注意要点"></a>注意要点</h3><ul><li>Java 严格区分大小写<ul><li>HelloWorld 和 helloworld 是不一样的<ul><li>对的路只有一条，错误的路成千上万</li></ul></li><li>class 和 Class 是不一样的<ul><li>Java 中的关键字全部都是小写，无需任何大写</li></ul></li><li>main 和 Main 是不一样的<ul><li>Java 虚拟机只会从 main 方法开始执行</li><li>Main 方法只是个普通的方法，而不是程序的入口</li></ul></li></ul></li><li>输出<ul><li>System.out.print ()<ul><li>不会换行</li></ul></li><li>System.out.println ()<ul><li>换行</li></ul></li></ul></li></ul><hr><h1 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h1><h3 id="jshell"><a href="#jshell" class="headerlink" title="jshell"></a>jshell</h3><ul><li><p>JDK9.0 版本以上新增工具</p></li><li><p>位于 JDK 安装目录的 bin 路径下 ，若系统提示找不到，则必是环境配置错误</p></li><li><p>REPL（Read-Eval-Print Loop 读取-求值-输出 循环）</p></li><li><p>交互式执行：</p><ul><li>立即执行命令，立即显示结果</li><li>快速学习 Java，快速测试 API</li></ul></li><li><p>好用到哭</p></li><li><p>甩 IDE 工具n条街（打开 IDE —&gt; 新建项目 —&gt; 新建类 —&gt; 写代码 —&gt; ……）</p></li><li><p>具体基本的用法如下：</p><pre class=" language-java"><code class="language-java">C<span class="token operator">:</span>\User\username <span class="token operator">></span> jshell   欢迎使用 JShell <span class="token operator">--</span> 版本 <span class="token number">11</span>   要大致了解该版本，请键入：<span class="token operator">/</span>help introjshell <span class="token operator">></span> <span class="token operator">/</span>help  <span class="token operator">|</span> 键入 Java 语言表达式<span class="token punctuation">,</span> 语句或声明。   <span class="token operator">|</span> 或者键入以下命令之一<span class="token operator">:</span>   <span class="token operator">|</span> <span class="token operator">/</span>list <span class="token punctuation">[</span><span class="token operator">&lt;</span>名称或 id<span class="token operator">></span><span class="token operator">|</span><span class="token operator">-</span>all<span class="token operator">|</span><span class="token operator">-</span>start<span class="token punctuation">]</span>   <span class="token operator">|</span>       列出您键入的源   <span class="token operator">|</span> <span class="token operator">/</span>edit <span class="token operator">&lt;</span>名称或 id<span class="token operator">></span>   <span class="token operator">|</span>       编辑源条目   <span class="token operator">|</span> <span class="token operator">/</span>drop <span class="token operator">&lt;</span>名称或 id<span class="token operator">></span>   <span class="token operator">|</span>       删除源条目   <span class="token operator">|</span> <span class="token operator">/</span>save <span class="token punctuation">[</span><span class="token operator">-</span>all<span class="token operator">|</span><span class="token operator">-</span>history<span class="token operator">|</span><span class="token operator">-</span>start<span class="token punctuation">]</span> <span class="token operator">&lt;</span>文件<span class="token operator">></span>   <span class="token operator">|</span>       将片段源保存到文件   <span class="token operator">|</span> <span class="token operator">/</span>open <span class="token operator">&lt;</span>file<span class="token operator">></span>   <span class="token operator">|</span>       打开文件作为源输入   <span class="token operator">|</span> <span class="token operator">/</span>vars <span class="token punctuation">[</span><span class="token operator">&lt;</span>名称或 id<span class="token operator">></span><span class="token operator">|</span><span class="token operator">-</span>all<span class="token operator">|</span><span class="token operator">-</span>start<span class="token punctuation">]</span>   <span class="token operator">|</span>       列出已声明变量及其值   <span class="token operator">|</span> <span class="token operator">/</span>methods <span class="token punctuation">[</span><span class="token operator">&lt;</span>名称或 id<span class="token operator">></span><span class="token operator">|</span><span class="token operator">-</span>all<span class="token operator">|</span><span class="token operator">-</span>start<span class="token punctuation">]</span>   <span class="token operator">|</span>       列出已声明方法及其签名   <span class="token operator">|</span> <span class="token operator">/</span>types <span class="token punctuation">[</span><span class="token operator">&lt;</span>名称或 id<span class="token operator">></span><span class="token operator">|</span><span class="token operator">-</span>all<span class="token operator">|</span><span class="token operator">-</span>start<span class="token punctuation">]</span>   <span class="token operator">|</span>       列出类型声明   <span class="token operator">|</span> <span class="token operator">/</span>imports   <span class="token operator">|</span>       列出导入的项   <span class="token operator">|</span> <span class="token operator">/</span>exit <span class="token punctuation">[</span><span class="token operator">&lt;</span>integer<span class="token operator">-</span>expression<span class="token operator">-</span>snippet<span class="token operator">></span><span class="token punctuation">]</span>   <span class="token operator">|</span>       退出 jshell 工具  <span class="token operator">|</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>jshell <span class="token operator">></span> <span class="token operator">/</span>exit   再见C<span class="token operator">:</span>\User\username <span class="token operator">></span> exit</code></pre></li></ul><h3 id="GC（Garbage-Collection）"><a href="#GC（Garbage-Collection）" class="headerlink" title="GC（Garbage Collection）"></a>GC（Garbage Collection）</h3><ul><li>垃圾回收器<ul><li>后台自动释放内存区的垃圾（不再被引用的对象）</li><li>整理出的内存分配给新的对象</li></ul></li><li>编写 Java 程序时的一个基本原则：<ul><li>对于不再需要的对象， 不要引用它们</li></ul></li></ul><hr><h1 id="面向对象简介"><a href="#面向对象简介" class="headerlink" title="面向对象简介"></a>面向对象简介</h1><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul><li>纯粹的面向对象编程语言，完全以对象为中心，完全支持面向对象的三种基本特征：<ul><li>封装：将对象的实现细节隐藏起来，并通过一些公用方法来暴露该类对外所提供的功能，从而提高了类的内聚性，降低了对象之间的耦合性<ul><li>一个类就是一个小的模块</li><li>高内聚<ul><li>尽可能把模块的内部数据、功能实现细节隐藏在模块内部独立完成，不允许外部直接干预</li></ul></li><li>低耦合<ul><li>仅暴露少量的方法给外部使用</li></ul></li></ul></li><li>继承：用已存在的类作为基础建立新的类，代码复用的重要手段，类之间共享属性和操作的机制，具有传递性</li><li>多态：同一类型的对象执行同一方法，表现出不同的行为特征，继承是多态的基础，没有继承就没有多态</li></ul></li></ul><table><thead><tr><th style="text-align:center">面向对象</th><th style="text-align:center">面向过程</th></tr></thead><tbody><tr><td style="text-align:center">OOA：面向对象分析</td><td style="text-align:center">SA：结构化分析</td></tr><tr><td style="text-align:center">OOD：面向对象设计</td><td style="text-align:center">SD：结构化设计</td></tr><tr><td style="text-align:center">OOP：面向对象编程</td><td style="text-align:center">SP：结构化编程</td></tr><tr><td style="text-align:center">强调直接以现实世界中的对象为中心来思考</td><td style="text-align:center">以主函数为入口，自顶向下，逐步求精，模块化</td></tr><tr><td style="text-align:center">类是最小的程序单位</td><td style="text-align:center">函数是最小的程序单位</td></tr><tr><td style="text-align:center">一切以对象为中心，对象最大</td><td style="text-align:center">一切以函数为中心，函数最大</td></tr><tr><td style="text-align:center">完成：“我国庆去蹦迪”</td><td style="text-align:center">完成：“我国庆去蹦迪”</td></tr><tr><td style="text-align:center">我.蹦迪（国庆）；</td><td style="text-align:center">蹦迪.（我，国庆）；</td></tr><tr><td style="text-align:center">“我”是某个类的具体对象</td><td style="text-align:center">“蹦迪”是函数</td></tr></tbody></table><ul><li>基于对象：<ul><li>例如 JavaScript</li><li>使用一些封装好的对象（实现了封装的特点）</li><li>调用对象的方法，设置对象的属性</li><li>但无法让开发者派生新的类（即没有继承的特点，更不可能有多态的特点）</li><li>只能使用现有对象的方法和属性</li></ul></li></ul><h3 id="一切都是对象"><a href="#一切都是对象" class="headerlink" title="一切都是对象"></a>一切都是对象</h3><ul><li>在 Java 语言中，除了8个基本数据类型之外，一切都是对象<ul><li>对象就是面向对象程序设计的核心</li><li>对象具有状态<ul><li>一个对象用数据值来描述它的状态</li><li>Java 通过为对象定义成员变量来描述对象的状态</li></ul></li><li>对象具有行为<ul><li>这些行为可以改变对象的状态</li><li>Java 通过为对象定义方法来描述对象的行为</li></ul></li><li>用 new 关键字创建指定类的对象</li><li>对象实现了数据和行为的结合<ul><li>把数据和行为封装成了一个有机的整体</li><li>提供了更大的编程粒度，更易于掌握和使用</li></ul></li><li>Java 里的对象具有唯一性<ul><li>每个对象都有一个标识符来引用它</li><li>失去标识符的对象将被垃圾回收器回收</li><li>Java 不允许直接访问对象，需通过对象的引用来操作对象</li></ul></li></ul></li></ul><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><ul><li>类是 Java 最小的程序单位</li><li>不管多大的 Java 应用程序，都是由一个个的类组成</li><li>类，是对具有相同或相似性质的一组对象的抽象</li><li>对象，是类的实例，是类的具体存在</li><li>一个类可以创建任意多个对象</li><li>用 class 关键字定义类<ul><li>使用成员变量来描述该类对象的数据</li><li>使用方法来描述该类对象的行为</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><ul><li>成员变量 + 方法 = 类定义</li><li>状态数据 + 行为 = 对象</li></ul></blockquote><h3 id="类与类之间的结构关系"><a href="#类与类之间的结构关系" class="headerlink" title="类与类之间的结构关系"></a>类与类之间的结构关系</h3><ul><li>一般 —&gt; 特殊<ul><li>典型的继承关系</li><li><code>is a</code> </li><li>通过使用关键字 extends 来表示这种继承关系</li><li>举例：<ul><li>水果 —&gt; 苹果</li><li>苹果 <code>is a</code> 水果</li></ul></li></ul></li><li>整体 —&gt; 部分<ul><li>典型的组合关系</li><li><code>has a</code> </li><li>通过在一个类里面保存另一个类的引用来实现这种组合关系</li></ul></li></ul><hr><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>基本数据类型（Primitive Type）<ul><li>boolean 布尔型</li><li>数值型<ul><li>整型<ul><li>byte 、short 、int 、long</li></ul></li><li>char 字符型<ul><li>实际上也是一种整数类型，相当于无符号整数类型</li><li>字符串不是基本数据类型，字符串是一个类，也就是一个引用数据类型</li></ul></li><li>浮点型<ul><li>float 、double</li></ul></li></ul></li></ul></li><li>引用数据类型（Reference Type）<ul><li>对一个对象的引用，对象包括实例和数组</li><li>类、接口和数组类型</li><li>特殊的空类型（null type）<ul><li>没有名称，因此不可能声明一个 null 类型的变量或者转换为 null 类型</li><li>null 引用是 null 类型表达式唯一可能的值</li><li>null 引用可以转换为任何引用类型<ul><li>且只能转换为引用类型，不能转化为基本类型</li><li>无法对一个基本类型的变量赋予 null 值</li></ul></li><li>实际开发中，可以忽略 null 类型，假定 null 只是引用类型的一个特殊直接量</li></ul></li><li>实际上，引用类型变量就是一个指针，只不过 Java 语言里不再使用指针的说法</li></ul></li></ul><h3 id="强类型语言"><a href="#强类型语言" class="headerlink" title="强类型语言"></a>强类型语言</h3><ul><li>Java 是一门强类型（strongly typed）语言<ul><li>所有变量必须先声明、后使用</li><li>指定类型的变量只能接受类型与之匹配的值</li></ul></li><li>声明变量的时候可以初始化，也可以不指定初始值</li><li>强类型语言可以在编译过程中发现源代码的错误，保证程序的健壮性</li></ul><h3 id="注释、分隔符、标识符、关键字"><a href="#注释、分隔符、标识符、关键字" class="headerlink" title="注释、分隔符、标识符、关键字"></a>注释、分隔符、标识符、关键字</h3><ul><li>注释<ul><li>单行注释<ul><li><code>// ......</code></li></ul></li><li>多行注释<ul><li><code>/*......*/</code></li></ul></li><li>文档注释<ul><li><code>/**......*/</code></li></ul></li></ul></li><li>分隔符<ul><li><code>;</code><ul><li>语句的分隔</li><li>一行可写多个语句，每个语句之间用分号隔开</li><li>一个语句可跨多行，最后用分号结束</li><li>字符串、变量名不能跨行</li></ul></li><li><code>{}</code><ul><li>定义代码块</li><li>成对出现</li></ul></li><li><code>[]</code><ul><li>访问数组元素</li><li>紧跟数组变量名</li><li>方括号内指定希望访问的数组元素的索引</li></ul></li><li><code>（）</code><ul><li>形参声明</li><li>实参传递</li><li>表达式优先</li><li>强制类型转换的运算符</li></ul></li><li><code></code><ul><li>Java 是一门格式自由的语言</li><li>空格几乎可以出现在 Java 程序的任何地方</li><li>可以出现任意多个空格</li><li>但不要把一个变量名隔开成两个</li><li>Java 的空格包括空格符（Space）、制表符（Tab）和回车（Enter）等</li></ul></li><li><code>.</code><ul><li>调用某个类或某个实例的指定成员</li></ul></li></ul></li><li>标识符<ul><li>给程序中的变量、类、方法命名的符号</li><li>开头：<ul><li>字母、下划线（<code>_</code>）、美元符（<code>$</code>）</li></ul></li><li>Java 区分大小写<ul><li>abc 和 Abc 是不同的标识符</li></ul></li><li>不允许使用单独的下划线 <code>_</code> 作为标识符<ul><li>下划线 <code>_</code> 必须与其他字符组合</li></ul></li><li>标识符不能是 Java 关键字和保留字<ul><li>但可以包含关键字和保留字</li></ul></li><li>标识符不能含空格</li><li>标识符只能含美元符 <code>$</code> ，不能含 <code>@</code>、<code>#</code> 等其他特殊字符</li></ul></li><li>关键字（keyword）<ul><li>Java 所有的关键字（50个）都是小写</li><li>TRUE 、FALSE 、NULL 不是 Java 关键字<ul><li>这是 Java 的直接量（literal）</li><li>标识符也不能使用这三个特殊的直接量</li></ul></li><li>goto 、const 也成为保留字（reserved word）<ul><li>Java 还未使用这两个关键字</li><li>但可能在未来的 Java 版本中使用</li></ul></li></ul></li></ul><h3 id="基本数据类型—整型"><a href="#基本数据类型—整型" class="headerlink" title="基本数据类型—整型"></a>基本数据类型—整型</h3><ul><li>byte<ul><li>1字节 = 8位</li><li>表数范围：-128 ~ 127</li><li style="list-style: none"><input type="checkbox" checked> [ -2^7] ~ [ 2^7 - 1]</li></ul></li><li>short<ul><li>2字节 = 16位</li><li>表数范围：-32768 ~ 32767</li><li style="list-style: none"><input type="checkbox" checked> [ -2^15] ~ [ 2^15 - 1]</li></ul></li><li>int<ul><li>4字节 = 32位</li><li>表数范围：-2147483648 ~ 2147483647</li><li style="list-style: none"><input type="checkbox" checked> [ -2^31] ~ [ 2^31 - 1]</li></ul></li><li>long<ul><li>8字节 = 64位</li><li>表数范围：</li><li style="list-style: none"><input type="checkbox" checked> [ -2^63] ~ [ 2^63 - 1]</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span> a1 <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">long</span> a2 <span class="token operator">=</span> 9999999999L<span class="token punctuation">;</span><span class="token keyword">long</span> a3 <span class="token operator">=</span> <span class="token number">9999</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出：18</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出：9999999999</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出：9999</span></code></pre><ul><li>int 是最常用的整数类型，直接给出一个整数类型默认就是 int 类型<ul><li>将一个较小的整数值（byte 或 short 表数范围之内）赋给 byte 或 short ，系统会自动把这个整数当成 byte 或 short 处理</li><li>如果整数值超过 int 表数范围，且希望系统把它当作 long 类型来处理，需要在这个整数值后加上 <code>L</code> 作为后缀</li><li>如果整数值在 int 表数范围之内，可以直接赋值给 long 类型的变量， int 类型会自动类型转换到 long 类型</li></ul></li></ul><ul><li>整数值表示方式<ul><li>二进制<ul><li>0b</li><li>0B</li></ul></li><li>八进制<ul><li>0</li></ul></li><li>十进制</li><li>十六进制<ul><li>0x</li><li>0X</li><li>10 ~ 15 = a ~ f = A ~ F </li></ul></li><li>二进制整数更加真实，更能表达整数在内存中的存在形式，在一些开发中使用二进制会更加便捷</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a4 <span class="token operator">=</span> 0B <span class="token number">1000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0011</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//32位</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出：-2147483645</span></code></pre><ul><li>32位的二进制整数<ul><li>最高位32位为符号位，当符号位是1时，表明其为负数</li><li>正如前面所指出的，整数值默认是 int 类型，若在二进制整数后添加 <code>L</code> ，这个二进制整数就会占64位，且第64位为符号位</li><li>计算机以补码的形式保存所有的整数<ul><li>正数的原码和补码完全相同</li><li>负数的转换情况如下所示：</li></ul></li></ul></li></ul><p><img src="https://i.loli.net/2018/10/04/5bb5643642960.jpg" alt="2"></p><ul><li><p>更多例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span> a5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>0b <span class="token number">1110</span> <span class="token number">1001</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*定义一个8位的二进制整数，数值默认为32位，因此最高位上无1，即为正数强制转换为 byte 类型，产生溢出最高位为1，为负数1110 1001 ——> 1110 1000 ——> 1001 0111*/</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出：-(2^4 + 2^2 + 2^1 + 2^0 )= -23</span><span class="token keyword">long</span> a6 <span class="token operator">=</span> 0b <span class="token number">1000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> 0011L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*定义一个32位的二进制整数，数值默认为32位，符号位为1，即为负数数值后添加 L 后缀，因此该整数实际占64位，符号位变为第64位，无1，即为正数且有：原码 = 补码*/</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出：2^32 + 2^1 + 2^0 = 2147483651</span></code></pre></li></ul><h3 id="基本数据类型—字符型"><a href="#基本数据类型—字符型" class="headerlink" title="基本数据类型—字符型"></a>基本数据类型—字符型</h3><ul><li>Java 使用 Unicode 字符集作为编码方式<ul><li>2字节 =16位</li><li>Unicode 被设计成支持世界上所有书面语言的字符集</li><li>因此 Java 支持各种语言的字符</li></ul></li><li>字符型值必须使用英文单引号 <code>&#39;&#39;</code> 括起来</li></ul><pre class=" language-java"><code class="language-java">  <span class="token keyword">char</span> b1 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//单个字符</span>  <span class="token keyword">char</span> b2 <span class="token operator">=</span> <span class="token string">'\''</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//转义字符 </span>  <span class="token keyword">char</span> b3 <span class="token operator">=</span> <span class="token string">'\"'</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//转义字符</span>  <span class="token keyword">char</span> b4 <span class="token operator">=</span> <span class="token string">'帅'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//单个字符</span>  <span class="token keyword">char</span> b5 <span class="token operator">=</span> <span class="token string">'\u9999'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Unicode 值，'\u9999'对应'香'字</span>  <span class="token keyword">char</span> b6 <span class="token operator">=</span> <span class="token number">107</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//编号107对应字符 k </span>  <span class="token keyword">int</span>  b7 <span class="token operator">=</span> <span class="token string">'k'</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//k 的 ASCII 码值为107</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出： a</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出： '</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出： "</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出： 帅</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出： 香</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b6<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出： k</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b7<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出： 107</span></code></pre><ul><li>字符型值的三种表示形式<ul><li>单个字符<ul><li>‘A’ 、’9’ 、’0’</li></ul></li><li>转义字符<ul><li>‘\n’ 、’\t’ </li></ul></li><li>直接使用 Unicode 值表示字符<ul><li>‘\uXXXX’</li><li>其中 XXXX 表示一个十六进制的整数，范围为 ‘\u0000’ ~ ‘\uFFFF’ ，共65536个</li><li>其中 ‘\u0000’ ~ ‘\u00FF’ 即为 ASCII 码值，共256个</li></ul></li></ul></li><li>计算机底层保存字符时，实际上是保存字符的编号，因此 char 类型也可以直接作为整型值来使用，它相当于一个16位的无符号整数，表数范围：0 ~ 65535 ，共65536个</li><li>char 类型的变量、值参与加、减、乘、除等运算，实际上便是该字符对应的编码参与运算</li><li>如果把 0 ~ 65535 范围内的 int 整数赋给 char 类型变量，系统会自动把这个 int 整数当成 char 类型来处理</li></ul><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token string">"世间安得双全法，不负如来不负卿"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//字符串</span>String s2 <span class="token operator">=</span> <span class="token string">"C:\\Java"</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//转义字符</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出：世间安得双全法，不负如来不负卿</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出：C：\Java</span></code></pre><ul><li>Java 没有提供字符串的基本数据类型，而是通过 String 类来表示字符串</li><li>字符串要使用英文双引号 <code>&quot;&quot;</code> 括起来</li><li>Java 中的 <code>&#39;</code> 、<code>&quot;</code> 、<code>\</code> 都有特殊用途</li><li>如果一个字符串中包含了这些特殊字符，则应该用转义字符辅助表示<ul><li><code>\b</code>——退格符</li><li><code>\n</code>——换行符</li><li><code>\r</code>——回车符</li><li><code>\t</code>——制表符</li><li><code>\&quot;</code>——双引号</li><li><code>\&#39;</code>——单引号</li><li><code>\\</code>——反斜线</li><li>Java 会把第一个反斜线 <code>\</code> 当成转义字符</li></ul></li></ul><h3 id="基本数据类型—浮点型"><a href="#基本数据类型—浮点型" class="headerlink" title="基本数据类型—浮点型"></a>基本数据类型—浮点型</h3><ul><li>Java 的浮点类型有固定的表数范围和字段长度，遵循 IEEE 754 标准，与机器无关</li><li>float<ul><li>单精度浮点数</li><li>4字节 = 32位</li></ul></li><li>double<ul><li>双精度浮点数</li><li>8字节 = 64位</li></ul></li><li>表示形式<ul><li>十进制<ul><li>5.12 、512.0 、.512</li><li>必须包含小数点</li></ul></li><li>科学计数法<ul><li>5.12e2 = 5.12 * 10^2</li><li>5.12E2 = 5.12 * 10^2</li><li>（e 或 E 之前的数）* 10^（e 或 E 之后的数）</li><li>只有浮点类型的数值才能使用科学计数法<ul><li>51200 是一个 int 类型的值</li><li>512E2 是一个浮点类型的值</li></ul></li></ul></li></ul></li><li>Java 的浮点类型默认是 double 类型<ul><li>5.12 表示 double 类型，占64位内存空间</li><li>5.12f 或 5.12F 表示 float 类型 ，占32位内存空间</li><li>在数值后面加 d 或 D 后缀，强制指定为 double 类型，但通常没必要</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">double</span> c1 <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token keyword">float</span>  c2 <span class="token operator">=</span> Float<span class="token punctuation">.</span>POSITIVE_INFINITY<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//float 型正无穷大</span><span class="token keyword">double</span> c3 <span class="token operator">=</span> Double<span class="token punctuation">.</span>POSITIVE_INFINITY<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//double 型正无穷大</span><span class="token keyword">float</span>  c4 <span class="token operator">=</span> Float<span class="token punctuation">.</span>NEGATIVE_INFINITY<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//float 型负无穷大</span><span class="token keyword">double</span> c5 <span class="token operator">=</span> Double<span class="token punctuation">.</span>NEGATIVE_INFINITY<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//double 型负无穷大</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//输出：0.0</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//输出：Infinity</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//输出：Infinity</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//输出：-Infinity</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c5<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//输出：-Infinity</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2 <span class="token operator">==</span> c3<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//输出：true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c4 <span class="token operator">==</span> c5<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//输出：true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1 <span class="token operator">/</span> c1<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//输出：NaN</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1 <span class="token operator">/</span> c1 <span class="token operator">==</span> Float<span class="token punctuation">.</span>NaN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出：false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span> <span class="token operator">/</span> c1<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//输出：-Infinity</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//输出：ArithmeticException：/by zero</span></code></pre><ul><li>三个特殊的浮点数值，用于表示溢出或出错<ul><li>正无穷大<ul><li>用一个正数除以0得到</li><li>所有正无穷大数值都是相等的</li></ul></li><li>负无穷大<ul><li>用一个负数除以0得到</li><li>所有负无穷大数值都是相等的</li></ul></li><li>非数<ul><li>0.0除以0.0 、对负数开方得到</li><li>一个非数不与任何数值相等，也不与任何非数相等</li></ul></li><li>只有浮点数除以0才能得到正无穷大或负无穷大</li><li>Java 会自动把和浮点数运算的0（整数）当作0.0（浮点数）处理</li><li>一个整数除以0，将抛出一个异常：ArithmeticException：/by zero（除以0异常）</li></ul></li></ul><pre class=" language-java"><code class="language-java">以单精度浮点数<span class="token number">176.0625</span>为例<span class="token number">1</span>）先将<span class="token number">176.0625</span>转换为二进制数小数点前：   <span class="token number">176</span> <span class="token operator">/</span>  <span class="token number">2</span>  <span class="token operator">=</span> <span class="token number">88</span>    余数为 <span class="token number">0</span>   <span class="token number">88</span>  <span class="token operator">/</span>  <span class="token number">2</span>  <span class="token operator">=</span><span class="token number">44</span>     余数为 <span class="token number">0</span>                                <span class="token number">44</span>  <span class="token operator">/</span>  <span class="token number">2</span>  <span class="token operator">=</span><span class="token number">22</span>     余数为 <span class="token number">0</span>                          <span class="token number">22</span>  <span class="token operator">/</span>  <span class="token number">2</span>  <span class="token operator">=</span> <span class="token number">11</span>    余数为 <span class="token number">0</span>                                 <span class="token number">11</span>  <span class="token operator">/</span>  <span class="token number">2</span>  <span class="token operator">=</span><span class="token number">5</span>      余数为 <span class="token number">1</span>           <span class="token number">5</span>   <span class="token operator">/</span>  <span class="token number">2</span>  <span class="token operator">=</span><span class="token number">2</span>      余数为 <span class="token number">1</span>                                <span class="token number">2</span>   <span class="token operator">/</span>  <span class="token number">2</span>  <span class="token operator">=</span><span class="token number">1</span>      余数为 <span class="token number">0</span>      <span class="token number">1</span>   <span class="token operator">/</span>  <span class="token number">2</span>  <span class="token operator">=</span><span class="token number">0</span>      余数为 <span class="token number">1</span> <span class="token punctuation">,</span>商为<span class="token number">0</span>，结束   小数点前整数转换为二进制<span class="token operator">:</span><span class="token number">1011</span> <span class="token number">0000</span>   小数点后：   <span class="token number">0.0625</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0.125</span>   整数为<span class="token number">0</span>                    <span class="token number">0.125</span>  <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0.25</span>    整数为<span class="token number">0</span>                <span class="token number">0.25</span>   <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0.50</span>    整数为<span class="token number">0</span>                <span class="token number">0.5</span>    <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1.0</span>     整数为<span class="token number">1</span> <span class="token punctuation">,</span>小数部分为<span class="token number">0</span><span class="token punctuation">,</span>结束小数点后的小数位转换为二进制：<span class="token number">0001</span>综上：<span class="token number">176.0625</span>转换为二进制为：<span class="token number">1011</span> <span class="token number">0000</span> <span class="token punctuation">.</span> <span class="token number">0001</span><span class="token number">2</span>）IEEE <span class="token number">754</span>约定小数点左边隐含有一位，通常这位数是<span class="token number">1</span>，即把小数点移动到整数位只有<span class="token number">1</span>所以有<span class="token number">1011</span> <span class="token number">0000</span> <span class="token punctuation">.</span> <span class="token number">0001</span> <span class="token operator">=</span> <span class="token number">1.011</span> <span class="token number">0000</span> <span class="token number">0001</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token function">111</span> <span class="token punctuation">(</span>小数点向左偏移<span class="token number">7</span>位，二进制 <span class="token number">7</span> <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span>）符号位：<span class="token number">176.0625</span><span class="token operator">></span><span class="token number">0</span><span class="token number">0</span><span class="token number">4</span>）指数：IEEE <span class="token number">754</span>约定单精度指数偏移量为 <span class="token number">127</span> <span class="token operator">=</span> <span class="token number">0111</span> <span class="token number">1111</span><span class="token number">111</span> <span class="token operator">+</span> <span class="token number">0111</span> <span class="token number">1111</span> <span class="token operator">=</span> <span class="token number">1000</span> <span class="token number">0110</span> （十进制 <span class="token number">7</span> <span class="token operator">+</span> <span class="token number">127</span> <span class="token operator">=</span> <span class="token number">134</span>）<span class="token number">5</span>）尾数：小数点后面的数<span class="token number">0110</span> <span class="token number">0000</span> <span class="token number">0010</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">000</span><span class="token number">6</span>）综上：<span class="token number">176.0625</span>使用IEEE <span class="token number">754</span>规格化后的表示为：<span class="token number">0</span><span class="token operator">-</span><span class="token number">1000</span> <span class="token number">0110</span><span class="token operator">-</span><span class="token number">0110</span> <span class="token number">0000</span> <span class="token number">0010</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">000</span></code></pre><ul><li>关于 IEEE 754 标准格式<ul><li>float<ul><li>单精度浮点数</li><li>4字节 = 32位 = 1 + 8 + 23</li><li>符号位1位——指数8位——小数点<code>.</code>——尾数23位</li><li>指数偏移量127</li></ul></li><li>double<ul><li>双精度浮点数</li><li>8字节 = 64位 = 1 + 11 + 52</li><li>符号位1位——指数11位——小数点<code>.</code>——尾数52位</li><li>指数偏移量1023</li></ul></li><li>约定小数点左边隐含有一位，通常这位数是1<ul><li>所以上述单精度尾数长度实际为24</li><li>所以上述双精度尾数长度实际为53</li></ul></li></ul></li></ul><h3 id="数值中使用下划线分隔"><a href="#数值中使用下划线分隔" class="headerlink" title="数值中使用下划线分隔"></a>数值中使用下划线分隔</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span>    d1 <span class="token operator">=</span> 0b1000_0000_0000_0000_0000_0000_0000_0011<span class="token punctuation">;</span>  <span class="token keyword">double</span> d2 <span class="token operator">=</span> 100_3<span class="token punctuation">.</span>14_15_9_26_5_36<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出：-2147483645</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出：1003.1415926536</span></code></pre><ul><li>整型数值</li><li>浮点型数值</li><li>自由使用</li><li>更直观地分辨数值中到底有多少位数</li><li>前面大多数使用 <code></code> 空格不规范，具体到程序当中编译运行需要合并空格</li></ul><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> e1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> e2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>String  s1 <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">+</span> <span class="token string">"    tt"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出：true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出：false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出：true   tt</span></code></pre><ul><li>只有一个 boolean 类型</li><li>用于表示逻辑上的“真”和“假”</li><li>boolean 类型的数值只能是 true 或 false</li><li>不能用0或非0代替</li><li>其他基本数据类型的值也不能转换成 boolean 类型</li><li>只需1位即可保存，但计算机允许分配的最小内存单元是1字节（8位），因此实际上占用8位</li><li>使用 boolean 类型的值和字符串进行连接运算， boolean 类型的值会自动转换成字符串</li></ul><h3 id="基本数据类型的转换"><a href="#基本数据类型的转换" class="headerlink" title="基本数据类型的转换"></a>基本数据类型的转换</h3><ul><li>Java 提供的7种数值类型之间可以互相转换（注意箭头方向）</li></ul><p>  <img src="https://i.loli.net/2018/10/03/5bb4d0c838787.jpg" alt="3"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span>     f1 <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">float</span>    f2 <span class="token operator">=</span> f1<span class="token punctuation">;</span><span class="token keyword">byte</span>    f3 <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token keyword">double</span>  f4 <span class="token operator">=</span> f3<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//String s = 5;//错误，因为整数不能直接赋给一个字符串</span>String  s1 <span class="token operator">=</span> <span class="token number">3.5f</span> <span class="token operator">+</span> <span class="token string">"AA"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出：6</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出：6.0</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出：9</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出：9.0</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出：3.5AA</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token string">"Hello！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*先执行：3 + 4 = 7输出：7Hello！*/</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello！"</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*先执行：Hello！3输出：Hello！34*/</span></code></pre><ul><li>自动类型转换</li><li>系统支持</li><li>把一个表数范围小的直接赋值给一个表数范围大的</li><li>任何基本类型的值和字符串进行连接运算时，基本类型的值将自动转换成字符串类型<ul><li>如果希望把基本类型的值转换成对应的字符串，可以将其与一个空字符串进行连接</li><li><code>+</code> 不仅可以作为加法运算符，还可以作为字符串连接运算符</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">double</span> f5 <span class="token operator">=</span> <span class="token number">3.98</span><span class="token punctuation">;</span><span class="token keyword">int</span>    f6 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>f5<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f6<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*Java 将直接截断浮点数的小数部分输出：3*/</span></code></pre><ul><li>强制类型转换<ul><li><code>(targetType)value</code></li><li>缩小转换</li><li>当试图强制把表数范围大的转换成表数范围小的，要格外小心，因为非常容易引起信息丢失</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomString</span><span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>     <span class="token punctuation">{</span>            String result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//定义一个空字符串</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>               <span class="token punctuation">{</span>                 <span class="token keyword">int</span> f7  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/*                生成一个97~122（a~z）之间的 int 类型整数                */</span>                 result  <span class="token operator">=</span> result <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>f7<span class="token punctuation">;</span>                <span class="token punctuation">}</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出一个随机的6位字符串</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>网络上经常遇到的临时验证码机制</li></ul><pre class=" language-java"><code class="language-java">String  s <span class="token operator">=</span> <span class="token string">"4556"</span><span class="token punctuation">;</span><span class="token keyword">int</span>    f8 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//输出：4556</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f8<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出：4556</span></code></pre><ul><li><code>Integer.parseInt()</code></li><li>通常情况下，字符串不能直接转换成基本类型</li><li>但可通过基本类型对应的包装类实现</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span>    f9      <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token keyword">char</span>    f10     <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token keyword">int</span>     f11     <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">double</span>  f12     <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token number">56789</span><span class="token punctuation">;</span><span class="token keyword">double</span>  result  <span class="token operator">=</span> f9 <span class="token operator">+</span> f10 <span class="token operator">+</span> f11 <span class="token operator">*</span> f12<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*右边表达式中最高等级操作数为 double 型所以应该给 result 赋给一个 double 类型若赋予 result 其他类型将发生错误 */</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f9<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//输出：40</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f10<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//输出：a</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f11<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//输出：50</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f12<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//输出：0.56789</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//输出：165.3945</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token string">"Hello！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*a 自动提升到 int 类型变成对应的 ASCII 码值 97先执行：97 + 3 = 100输出：100Hello！*/</span></code></pre><ul><li>当一个算术表达式中包含多个基本类型的值时，整个算术表达式的数据类型将发生自动提升<ul><li>byte 、short 、char 提升到 int 类型</li><li>自动提升到与表达式中最高等级操作数同样的类型</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">short</span> f13 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span>   f14 <span class="token operator">=</span> <span class="token number">25</span> <span class="token operator">/</span> f13<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*数学上得到8.33333......但结果严格保持和表达式中最高等级操作数相同的类型 int*/</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f13<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出：3</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f14<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出：8</span></code></pre><ul><li>两个整数进行除法运算，如果不能整除，将直接把小数部分截断，取整数部分</li></ul><h3 id="直接量"><a href="#直接量" class="headerlink" title="直接量"></a>直接量</h3><ul><li>程序中通过源代码直接给出的值<ul><li>int 类型直接量<ul><li>在程序中直接给出的整型数值</li><li>二进制 、八进制 、十进制 、十六进制</li></ul></li><li>long 类型直接量<ul><li>在整型数值后加上 L 后缀（也可以加 1 ，但是容易混淆）</li></ul></li><li>char 类型直接量<ul><li>单引号括起来的字符</li><li>转义字符</li><li>Unicode 值</li></ul></li><li>double 类型直接量<ul><li>标准小数形式 、科学计数法</li></ul></li><li>float 类型直接量<ul><li>在一个浮点型数值后加上 f 或 F 后缀</li><li>标准小数形式 、科学计数法</li></ul></li><li>boolean 类型直接量<ul><li>true</li><li>false</li></ul></li><li>String 类型直接量<ul><li>双引号括起来的字符序列</li></ul></li><li>null 类型直接量<ul><li>null</li></ul></li></ul></li><li>boolean 类型的直接量只能赋值给 boolean 类型</li><li>null 类型的直接量可以直接赋给任何引用类型</li></ul><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Foundation </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SQL Foundation.B</title>
      <link href="/2018/09/30/SQL-Foundation-B/"/>
      <url>/2018/09/30/SQL-Foundation-B/</url>
      
        <content type="html"><![CDATA[<h1 id="Three-Questions-Before-Embarking-On-A-trip-To-SQL"><a href="#Three-Questions-Before-Embarking-On-A-trip-To-SQL" class="headerlink" title="Three Questions Before Embarking On A trip To SQL"></a>Three Questions Before Embarking On A trip To SQL</h1><blockquote><h4 id="为什么要用这些技术"><a href="#为什么要用这些技术" class="headerlink" title="为什么要用这些技术"></a>为什么要用这些技术</h4></blockquote><blockquote><h4 id="用这些技术有什么好处"><a href="#用这些技术有什么好处" class="headerlink" title="用这些技术有什么好处"></a>用这些技术有什么好处</h4></blockquote><blockquote><h4 id="如果不用这些技术行不行"><a href="#如果不用这些技术行不行" class="headerlink" title="如果不用这些技术行不行"></a>如果不用这些技术行不行</h4></blockquote><hr><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><ul><li>子查询<ul><li>嵌入在其他 SQL 语句中的 select 语句</li><li>本质<ul><li>多个select语句的嵌套</li></ul></li></ul></li></ul><h2 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h2><ul><li>返回一行一列给外部（主）SQL 语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teachers       <span class="token keyword">where</span>        wage <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token keyword">from</span> teachers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students       <span class="token keyword">where</span>        specialty <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> specialty <span class="token keyword">from</span> students                            <span class="token keyword">where</span>                            name <span class="token operator">=</span> <span class="token string">'王天仪'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students       <span class="token keyword">where</span>        dob <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> dob <span class="token keyword">from</span> students                      <span class="token keyword">where</span>                      name <span class="token operator">=</span> <span class="token string">'王天仪'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>where<ul><li>子查询的结果作为主查询的查询条件</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> department_id <span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"平均工资"</span> <span class="token keyword">from</span> teachers       <span class="token keyword">group</span> <span class="token keyword">by</span> department_id       <span class="token keyword">having</span>        <span class="token function">avg</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">avg</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> teachers                            <span class="token keyword">group</span> <span class="token keyword">by</span> department_id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>having<ul><li>子查询的结果作为主查询的分组条件</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students                       <span class="token keyword">where</span>                       sex <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">)</span>       <span class="token keyword">where</span>        specialty <span class="token operator">=</span> <span class="token string">'计算机'</span><span class="token punctuation">;</span></code></pre><ul><li>from<ul><li>子查询的结果作为主查询的视图</li></ul></li></ul><h2 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h2><ul><li>返回多行一列给外部（主）SQL 语句</li><li>where 子句中必须使用多行比较符 in、any或all</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> student_id <span class="token punctuation">,</span> name <span class="token keyword">from</span> students       <span class="token keyword">where</span>        student_id <span class="token operator">in</span>        <span class="token punctuation">(</span><span class="token keyword">select</span> student_id <span class="token keyword">from</span> students                <span class="token keyword">where</span>                name <span class="token operator">like</span> <span class="token string">'王%'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> course_id <span class="token punctuation">,</span> course_name <span class="token keyword">from</span> courses       <span class="token keyword">where</span>        course_id <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> course_id <span class="token keyword">from</span> student_grade<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>in</code><ul><li>匹配于子查询的任意一个值</li><li>结果为真，否则为假</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teachers       <span class="token keyword">where</span>        wage <span class="token operator">&lt;</span> <span class="token keyword">any</span>       <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token keyword">from</span> teachers                <span class="token keyword">group</span> <span class="token keyword">by</span> department_id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p><code>any</code></p><ul><li>只要符合子查询结果的任意一个值</li><li>结果为真，否则为假</li><li><p><code>= any</code></p><ul><li>功能与IN操作符是完全一样的</li></ul></li><li><p><code>&gt; any</code></p><ul><li>比子查询中返回的最小结果还要大</li></ul></li><li><p><code>&lt; any</code></p><ul><li>比子查询中返回的最大结果要小</li></ul></li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teachers       <span class="token keyword">where</span>        wage <span class="token operator">></span> <span class="token keyword">all</span>        <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token keyword">from</span> teachers                <span class="token keyword">group</span> <span class="token keyword">by</span> department_id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>all</code><ul><li>必须符合子查询结果的所有值</li><li>结果为真，否则为假</li><li><code>&gt; all</code><ul><li>比子查询中返回的最大结果还要大</li></ul></li><li><code>&lt; all</code><ul><li>比子查询中返回的最小结果还要小</li></ul></li></ul></li></ul><h2 id="多列子查询"><a href="#多列子查询" class="headerlink" title="多列子查询"></a>多列子查询</h2><ul><li>返回一行多列或多行多列给外部（主）SQL 语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students       <span class="token keyword">where</span>        <span class="token punctuation">(</span>specialty <span class="token punctuation">,</span> dob<span class="token punctuation">)</span> <span class="token operator">=</span>       <span class="token punctuation">(</span><span class="token keyword">select</span> specialty <span class="token punctuation">,</span> dob <span class="token keyword">from</span> students                <span class="token keyword">where</span>                name <span class="token operator">=</span> <span class="token string">'王天仪'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>返回一行多列<ul><li>参照单行子查询</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teachers       <span class="token keyword">where</span>        <span class="token punctuation">(</span>department_id <span class="token punctuation">,</span> wage<span class="token punctuation">)</span> <span class="token operator">in</span>        <span class="token punctuation">(</span><span class="token keyword">select</span> department_id <span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token keyword">from</span> teachers                <span class="token keyword">group</span> <span class="token keyword">by</span> department_id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>返回多行多列<ul><li>参照多行子查询</li></ul></li></ul><h2 id="相关子查询"><a href="#相关子查询" class="headerlink" title="相关子查询"></a>相关子查询</h2><ul><li>子查询引用了外部（主）查询中的一列或多列<ul><li>子查询不能在外部（主）查询之前求值</li><li>需要依靠外部查询才能获得值</li><li>执行过程：<ul><li>1、<ul><li>从外层查询中取出一个元组，将元组相关列的值传给内层查询</li></ul></li><li>2、<ul><li>执行内层查询，得到子查询操作的值</li></ul></li><li>3、<ul><li>外查询根据子查询返回的结果或结果集得到满足条件的行</li></ul></li><li>4、<ul><li>然后外层查询取出下一个元组重复做步骤1-3，直到外层的元组全部处理完毕</li></ul></li></ul></li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teachers t1       <span class="token keyword">where</span>        wage <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token keyword">from</span> teachers t2                      <span class="token keyword">where</span>                       t2<span class="token punctuation">.</span>department_id <span class="token operator">=</span> t1<span class="token punctuation">.</span>department_id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>外部（主）查询和子查询通过 department_id 相关联<ul><li>外部（主）查询从 teacher 表中检索出所有行</li><li>并传递给子查询</li><li>子查询接受外部（主）查询传递过来的每一行数据</li><li>并对满足 t2.department_id = t1.department_id 的每一部门教师计算平均工资</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> course_id <span class="token punctuation">,</span> course_name <span class="token keyword">from</span> courses <span class="token number">c</span>       <span class="token keyword">where</span>        <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">2</span> <span class="token keyword">from</span> student_grade sg                      <span class="token keyword">where</span>                       sg<span class="token punctuation">.</span>course_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>course_id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>exists</code></li><li>已被选学的课程<ul><li>用于检查子查询返回的记录行是否存在</li><li>分析执行步骤：<ul><li>1、<ul><li>先执行外部查询</li><li>SQL&gt; select course_id ,course_name from courses c</li></ul></li><li>2、<ul><li>外部查询的每一条数据对比一次子查询</li><li>第一次比较<ul><li>10101 计算机组成原理</li><li>只要 exists 后对比的结果返回true </li><li>则列出 10101 计算机组成原理</li></ul></li></ul></li><li>3、<ul><li>同理外部查询的 course_id , course_name 还剩下8项</li><li>一一和内部查询的 student_id , course_id , grade 比较</li><li>最后得出结果</li><li>不管第二个 select 用 * 号还是 student_id , course_id , grade 项</li><li>都不会影响整个相关查询的结果，</li><li>外部查询的项和内部查询项对比时只会看是否为ture，如果为ture则列出结果</li><li>用 select 2 不用 select *</li><li>因为用 select * 要查数据字典所以会慢点</li></ul></li></ul></li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> course_id <span class="token punctuation">,</span> course_name <span class="token keyword">from</span> courses <span class="token number">c</span>       <span class="token keyword">where</span>        <span class="token operator">not</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">2</span> <span class="token keyword">from</span> student_grade sg                         <span class="token keyword">where</span>                          sg<span class="token punctuation">.</span>course_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>course_id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>not exists</code></li><li>未被选学的课程<ul><li>用于检查子查询返回的记录行是否不存在</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> department_id <span class="token punctuation">,</span> department_name <span class="token keyword">from</span> departments       <span class="token keyword">where</span>        department_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> department_id <span class="token keyword">from</span> teachers<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>in</code><ul><li>已经安排教师的系部</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> department_id <span class="token punctuation">,</span> department_name <span class="token keyword">from</span> departments       <span class="token keyword">where</span>        department_id <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> department_id <span class="token keyword">from</span> teachers<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>not in</code><ul><li>没有安排教师的系部</li></ul></li></ul><h2 id="嵌套子查询"><a href="#嵌套子查询" class="headerlink" title="嵌套子查询"></a>嵌套子查询</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students                       <span class="token keyword">where</span>                       specialty <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> specialty <span class="token keyword">from</span> students                                           <span class="token keyword">where</span>                                           name <span class="token operator">=</span> <span class="token string">'王天仪'</span><span class="token punctuation">)</span>               <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>嵌套深度允许高达255级</li></ul><h2 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> course_id <span class="token punctuation">,</span> course_name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> courses       <span class="token keyword">union</span> <span class="token keyword">all</span><span class="token keyword">select</span> minor_id <span class="token punctuation">,</span> minor_name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> minors<span class="token punctuation">;</span><span class="token keyword">select</span> course_id <span class="token punctuation">,</span> course_name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> courses       <span class="token keyword">union</span> <span class="token keyword">all</span><span class="token keyword">select</span> minor_id <span class="token punctuation">,</span> minor_name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> minors       <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students        <span class="token keyword">where</span>        specialty <span class="token operator">=</span> <span class="token string">'计算机'</span>       <span class="token keyword">union</span> <span class="token keyword">all</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students        <span class="token keyword">where</span>        sex <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students        <span class="token keyword">where</span>        specialty <span class="token operator">=</span> <span class="token string">'计算机'</span>       <span class="token keyword">union</span> <span class="token keyword">all</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students        <span class="token keyword">where</span>        sex <span class="token operator">=</span> <span class="token string">'男'</span>       <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><ul><li><code>union all</code><ul><li>获取两个查询结果的并集</li><li>不取消重复行</li><li>不排序</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> course_id <span class="token punctuation">,</span> course_name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> courses       <span class="token keyword">union</span><span class="token keyword">select</span> minor_id <span class="token punctuation">,</span> minor_name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> minors<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students        <span class="token keyword">where</span>        specialty <span class="token operator">=</span> <span class="token string">'计算机'</span>       <span class="token keyword">union</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students        <span class="token keyword">where</span>        sex <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span></code></pre><ul><li><code>union</code><ul><li>获取两个查询结果的并集</li><li>自动取消重复行</li><li>以第一列排序</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> course_id <span class="token punctuation">,</span> course_name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> courses       <span class="token keyword">intersect</span><span class="token keyword">select</span> minor_id <span class="token punctuation">,</span> minor_name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> minors<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students        <span class="token keyword">where</span>        specialty <span class="token operator">=</span> <span class="token string">'计算机'</span>       <span class="token keyword">intersect</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students        <span class="token keyword">where</span>        sex <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span></code></pre><ul><li><code>intersect</code><ul><li>获取两个查询结果的交集</li><li>第一个查询结果集中存在</li><li>第二个查询结果集中存在</li><li>以第一列排序</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> course_id <span class="token punctuation">,</span> course_name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> courses       minus<span class="token keyword">select</span> minor_id <span class="token punctuation">,</span> minor_name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> minors<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students        <span class="token keyword">where</span>        specialty <span class="token operator">=</span> <span class="token string">'计算机'</span>       minus<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students        <span class="token keyword">where</span>        sex <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span></code></pre><ul><li><code>minus</code><ul><li>获取两个集合的差集</li><li>第一个查询结果集中存在</li><li>第二个查询结果集不存在</li><li>以第一列排序</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token punctuation">(</span><span class="token keyword">select</span> course_id <span class="token punctuation">,</span> course_name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> courses       <span class="token keyword">intersect</span><span class="token keyword">select</span> minor_id <span class="token punctuation">,</span> minor_name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> minors<span class="token punctuation">)</span>       <span class="token keyword">union</span><span class="token keyword">select</span> course_id <span class="token punctuation">,</span> course_name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> courses2<span class="token punctuation">;</span><span class="token keyword">select</span> course_id <span class="token punctuation">,</span> course_name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> courses       <span class="token keyword">union</span><span class="token punctuation">(</span><span class="token keyword">select</span> minor_id <span class="token punctuation">,</span> minor_name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> minors       <span class="token keyword">intersect</span><span class="token keyword">select</span> course_id <span class="token punctuation">,</span> course_name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> courses2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>组合使用集合操作符<ul><li>具有相同的优先级</li><li>从左至右</li><li>括号内的集合操作具有较高的优先级</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> course_id <span class="token punctuation">,</span> course_name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> courses       <span class="token keyword">union</span><span class="token keyword">select</span> minor_id <span class="token punctuation">,</span> minor_name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> minors       <span class="token keyword">order</span> <span class="token keyword">by</span> course_name<span class="token punctuation">;</span><span class="token keyword">select</span> course_id <span class="token punctuation">,</span> course_name <span class="token keyword">as</span> name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> courses       <span class="token keyword">union</span><span class="token keyword">select</span> minor_id <span class="token punctuation">,</span> minor_name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> minors       <span class="token keyword">order</span> <span class="token keyword">by</span> name<span class="token punctuation">;</span><span class="token keyword">select</span> course_id <span class="token punctuation">,</span> course_name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> courses       <span class="token keyword">union</span><span class="token keyword">select</span> minor_id <span class="token punctuation">,</span> minor_name <span class="token punctuation">,</span> credit_hour <span class="token keyword">from</span> minors       <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><ul><li>集合操作符只能有一个 order by 子句<ul><li>必须将它放在语句的末尾</li><li>排序的3种较好的选择<ul><li>第一个 select 中的列名</li><li>第一个 select 中的列别名</li><li>集合操作结果集中的位置编号</li></ul></li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> course_name <span class="token keyword">as</span> <span class="token string">"111"</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>credit_hour<span class="token punctuation">)</span> <span class="token keyword">from</span> courses       <span class="token keyword">where</span>        credit_hour <span class="token operator">></span> <span class="token number">3</span>       <span class="token keyword">group</span> <span class="token keyword">by</span> course_name       <span class="token keyword">union</span><span class="token keyword">select</span> minor_name <span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>credit_hour<span class="token punctuation">)</span> <span class="token keyword">from</span> minors       <span class="token keyword">where</span>        credit_hour <span class="token operator">></span> <span class="token number">2</span>       <span class="token keyword">group</span> <span class="token keyword">by</span> minor_name<span class="token punctuation">;</span></code></pre><ul><li>为某个列指定一个新的名称（列别名），必须在集合操作的第一个select子句中指定</li></ul><h2 id="集合操作中的数据类型"><a href="#集合操作中的数据类型" class="headerlink" title="集合操作中的数据类型"></a>集合操作中的数据类型</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> table_1 <span class="token punctuation">(</span>       column_11 number<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       column_12 varchar2<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> table_2 <span class="token punctuation">(</span>       column_21 number<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       column_22 varchar2<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> table_1<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">111</span> <span class="token punctuation">,</span> <span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> table_1<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">222</span> <span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> table_1<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">333</span> <span class="token punctuation">,</span> <span class="token string">'cc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> table_2<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">44444</span> <span class="token punctuation">,</span> <span class="token string">'dddd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> table_2<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">55555</span> <span class="token punctuation">,</span> <span class="token string">'eeee'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> table_2<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">66666</span> <span class="token punctuation">,</span> <span class="token string">'ffff'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_1<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_2<span class="token punctuation">;</span>delet <span class="token keyword">from</span> table_1<span class="token punctuation">;</span>delet <span class="token keyword">from</span> table_2<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> table_1<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> table_2<span class="token punctuation">;</span><span class="token keyword">select</span> column_11 <span class="token punctuation">,</span> column_12 <span class="token keyword">from</span> table_1       <span class="token keyword">union</span><span class="token keyword">select</span> column_21 <span class="token punctuation">,</span> column_22 <span class="token keyword">from</span> table_2<span class="token punctuation">;</span></code></pre><ul><li>集合操作中的数据类型相同，长度不同<ul><li>文本<ul><li>让所有数据的长度等于最长列的长度</li></ul></li><li>数值<ul><li>让所有数据的长度保持所有数值都允许的长度</li></ul></li><li>日期<ul><li>日期列的数据类型只有一个，不存在数据类型相同但长度不同的情况</li></ul></li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> table_3 <span class="token punctuation">(</span>       column_31 number<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       column_32 varchar2<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       column_33 varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> table_4 <span class="token punctuation">(</span>       column_41 varchar2<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       column_42 number<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       column_43 <span class="token keyword">date</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> table_3<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">111</span> <span class="token punctuation">,</span><span class="token string">'aa'</span> <span class="token punctuation">,</span> <span class="token string">'aaaaaaaaaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> table_3<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">222</span> <span class="token punctuation">,</span><span class="token string">'bb'</span> <span class="token punctuation">,</span> <span class="token string">'bbbbbbbbbb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> table_3<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">333</span> <span class="token punctuation">,</span><span class="token string">'cc'</span> <span class="token punctuation">,</span> <span class="token string">'cccccccccc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> table_4<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'ddd'</span> <span class="token punctuation">,</span><span class="token number">44</span> <span class="token punctuation">,</span> <span class="token string">'07-5月-1998'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> table_4<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'eee'</span> <span class="token punctuation">,</span><span class="token number">55</span> <span class="token punctuation">,</span> <span class="token string">'07-5月-1998'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> table_4<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'fff'</span> <span class="token punctuation">,</span><span class="token number">66</span> <span class="token punctuation">,</span> <span class="token string">'07-5月-1998'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_3<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_4<span class="token punctuation">;</span>delet <span class="token keyword">from</span> table_3<span class="token punctuation">;</span>delet <span class="token keyword">from</span> table_4<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> table_3<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> table_4<span class="token punctuation">;</span><span class="token keyword">select</span> to_char <span class="token punctuation">(</span>column_31<span class="token punctuation">)</span> <span class="token punctuation">,</span>        column_32 <span class="token punctuation">,</span>        column_33 <span class="token keyword">from</span> table_3       <span class="token keyword">union</span><span class="token keyword">select</span> column_41 <span class="token punctuation">,</span>        to_char <span class="token punctuation">(</span>column_42<span class="token punctuation">)</span> <span class="token punctuation">,</span>        to_char <span class="token punctuation">(</span>column_43 <span class="token punctuation">,</span> <span class="token string">'yyyy-mm-dd'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> table_4<span class="token punctuation">;</span></code></pre><ul><li>集合操作中的数据类型不同<ul><li>通过 to_char() 函数将所有数字型或日期型转换为文本型<ul><li>查询前的设置<ul><li>SQL&gt; column column_31 format a10;<ul><li>字段column_31输出时的格式设置为文本型，且占10个字符宽度</li></ul></li><li>SQL&gt; column column_32 format a10;<ul><li>字段column_32输出时的格式设置为文本型，且占10个字符宽度</li></ul></li><li>SQL&gt; column column_33 format a10;<ul><li>字段column_33输出时的格式设置为文本型，且占10个字符宽度</li></ul></li></ul></li></ul></li></ul></li></ul><pre class=" language-sql"><code class="language-sql"></code></pre><pre class=" language-sql"><code class="language-sql"></code></pre><pre class=" language-sql"><code class="language-sql"></code></pre><pre class=" language-sql"><code class="language-sql"></code></pre><pre class=" language-sql"><code class="language-sql"></code></pre><pre class=" language-sql"><code class="language-sql"></code></pre><pre class=" language-sql"><code class="language-sql"></code></pre><pre class=" language-sql"><code class="language-sql"></code></pre><pre class=" language-sql"><code class="language-sql"></code></pre><pre class=" language-sql"><code class="language-sql"></code></pre><pre class=" language-sql"><code class="language-sql"></code></pre><pre class=" language-sql"><code class="language-sql"></code></pre><pre class=" language-sql"><code class="language-sql"></code></pre><pre class=" language-sql"><code class="language-sql"></code></pre><pre class=" language-sql"><code class="language-sql"></code></pre><pre class=" language-sql"><code class="language-sql"></code></pre><pre class=" language-sql"><code class="language-sql"></code></pre><pre class=" language-sql"><code class="language-sql"></code></pre><pre class=" language-sql"><code class="language-sql"></code></pre><pre class=" language-sql"><code class="language-sql"></code></pre><pre class=" language-sql"><code class="language-sql"></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Foundation </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SQL Foundation.A</title>
      <link href="/2018/09/30/SQL-Foundation-A/"/>
      <url>/2018/09/30/SQL-Foundation-A/</url>
      
        <content type="html"><![CDATA[<h1 id="Three-Questions-Before-Embarking-On-A-trip-To-SQL"><a href="#Three-Questions-Before-Embarking-On-A-trip-To-SQL" class="headerlink" title="Three Questions Before Embarking On A trip To SQL"></a>Three Questions Before Embarking On A trip To SQL</h1><blockquote><h4 id="为什么要用这些技术"><a href="#为什么要用这些技术" class="headerlink" title="为什么要用这些技术"></a>为什么要用这些技术</h4></blockquote><blockquote><h4 id="用这些技术有什么好处"><a href="#用这些技术有什么好处" class="headerlink" title="用这些技术有什么好处"></a>用这些技术有什么好处</h4></blockquote><blockquote><h4 id="如果不用这些技术行不行"><a href="#如果不用这些技术行不行" class="headerlink" title="如果不用这些技术行不行"></a>如果不用这些技术行不行</h4></blockquote><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>SQL Server 是美国 Microsoft 公司推出的关系型数据库管理系统（RDBMS）</li><li>Oracle 是美国 Oracle 公司推出的关系型数据库管理系统</li><li>MySQL 关系型数据库管理系统，由瑞典 MySQL AB 公司开发，目前属于 Oracle 旗下产品</li><li>Oracle 11g<ul><li>帮助企业管理企业信息</li><li>更深入地洞察业务状况并做出调整</li><li>适应不断变化的竞争环境</li></ul></li></ul><h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><ul><li>关系型数据库中要满足的一定要求</li><li>规范化有助于消除表中数据的冗余和不一致性</li><li>为了充分发挥 SQL 的作用，往往是转化到第三范式</li><li>规范化的一个简单原则：所有的属性必须完全依赖于主关键字列</li><li>第一范式（1NF）<ul><li>所有属性都是不可分割的</li><li>表中的每一行每一列均有一个值，永远不会是一组值</li></ul></li><li>第二范式（2NF）<ul><li>每一个不是关键字一部分的列都依赖于关键字</li><li>如果函数仅依赖于一部分主码（主码有若干个）来确定信息，则违反了第二范式</li></ul></li><li>第三范式 （3NF）<ul><li>每个非关键字列都独立于其他非关键字列，并依赖于关键字</li><li>违反第三范式经常产生严重后果，必须予以纠正</li></ul></li></ul><h2 id="SQL、PL-SQL、SQL-PLUS"><a href="#SQL、PL-SQL、SQL-PLUS" class="headerlink" title="SQL、PL/SQL、SQL*PLUS"></a>SQL、PL/SQL、SQL*PLUS</h2><ul><li>SQL（结构化查询语言）是世界上最流行的、标准化的数据库语言<ul><li>4GL ，第四代语言</li><li>用于建立、存储、修改、检索和管理关系型数据库中的数据</li><li>非过程化程度相当高，用户只需在程序中指出要做什么就可以了</li><li>在 BASIC、C++、Java 等语言中<ul><li>3GL ，第三代语言</li><li>需要把对数据进行处理的每一过程都在程序中表达清楚</li><li>否则程序就不能正确反映用户的要求与意图</li><li>这样的语言称之为过程化语言</li></ul></li></ul></li><li>PL/SQL 是一种过程化语言，是对SQL的扩充<ul><li>3GL ，第三代语言</li><li>把SQL语言的特点和第三代语言（3GL）的强大功能结合在一起</li><li>可以用来实现比较复杂的业务逻辑，成为设计复杂数据库应用程序的有力工具</li></ul></li><li>SQL*Plus 是 Oracle 数据库的开发工具<ul><li>在 SQL*Plus 环境中可以编辑、调试、运行 SQL 语言语句和 PL/SQL 程序</li><li>对英文字母大小写不敏感</li><li>增加程序的可读性：<ul><li>关键字大写</li><li>标识符小写</li></ul></li><li>SQL&gt; 是SQL*Plus的提示符</li><li>退出操作<ul><li>SQL&gt;exit（出口、通道）</li><li>SQL&gt;quit（辞职、中断）</li></ul></li><li>在SQL*Plus 中执行 SQL 语句，语句末尾需要加上分号 <code>；</code></li><li>在SQL*Plus 中执行 PL/SQL 程序，先需执行 <code>set serveroutput on</code><ul><li>且最后一条语句的下一行需要输入斜杠 <code>/</code></li></ul></li></ul></li></ul><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul><li>Oracle 11g 主要的3种数据类型：基本、集合、引用。</li></ul><ul><li>char：定长字符串，必须指定长度，1（默认）~255字节</li><li>varchar2：变长字符串，必须指定最大字节数，最大长度为2000字节</li><li>number：存储零、正负定点数或浮点数，最大精度38位<ul><li>定点数据类型<code>number（p,s）</code></li><li>p：总的有效数字的位数，精度范围1~38</li><li>s：小数点右边数字位，范围-84~127</li></ul></li></ul><h2 id="日期格式"><a href="#日期格式" class="headerlink" title="日期格式"></a>日期格式</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> sysdate <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token keyword">user</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> to_char<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd hh24:mi:ss'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span></code></pre><ul><li><code>select sysdate from dual</code><ul><li>显示 Oracle 系统日期</li></ul></li><li>sysdate 为 Oracle 系统当前服务器的时间<ul><li>dual 是一个单行单列的虚拟表<ul><li>dual 表数据类型为 varchar2(1)</li><li>Oracle 的内部逻辑保证 dual 表中永远只有一条数据 <code>X</code></li><li>dual 可用来选择系统变量或求一个表达式的值</li></ul></li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> sysdate <span class="token punctuation">,</span> to_char <span class="token punctuation">(</span>sysdate <span class="token punctuation">,</span> <span class="token string">'yyyy-mm-dd'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> sysdate <span class="token punctuation">,</span> to_char <span class="token punctuation">(</span>sysdate <span class="token punctuation">,</span> <span class="token string">'yyyy/mm/dd'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> sysdate <span class="token punctuation">,</span> to_char <span class="token punctuation">(</span>sysdate <span class="token punctuation">,</span> <span class="token string">'yyyymmdd'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> sysdate <span class="token punctuation">,</span> to_char <span class="token punctuation">(</span>sysdate <span class="token punctuation">,</span> <span class="token string">'yyyymmdd hh24:mi:ss'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> sysdate <span class="token punctuation">,</span> to_char <span class="token punctuation">(</span>sysdate <span class="token punctuation">,</span> <span class="token string">'yyyy'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> sysdate <span class="token punctuation">,</span> to_char <span class="token punctuation">(</span>sysdate <span class="token punctuation">,</span> <span class="token string">'mm'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> sysdate <span class="token punctuation">,</span> to_char <span class="token punctuation">(</span>sysdate <span class="token punctuation">,</span> <span class="token string">'hh24'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> sysdate <span class="token punctuation">,</span> to_char <span class="token punctuation">(</span>sysdate <span class="token punctuation">,</span> <span class="token string">'mi'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span></code></pre><ul><li>to_char ()函数<ul><li>将时间日期按照指定的格式输出，得到的是字符串，而非date类型</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> sysdate <span class="token punctuation">,</span> to_date <span class="token punctuation">(</span><span class="token string">'20170615'</span> <span class="token punctuation">,</span> <span class="token string">'yyyy-mm-dd'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> sysdate <span class="token punctuation">,</span> to_date <span class="token punctuation">(</span><span class="token string">'20170615'</span> <span class="token punctuation">,</span> <span class="token string">'yyyy/mm/dd'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> sysdate <span class="token punctuation">,</span> to_date <span class="token punctuation">(</span><span class="token string">'20170615'</span> <span class="token punctuation">,</span> <span class="token string">'yyyymmdd'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> sysdate <span class="token punctuation">,</span> to_date <span class="token punctuation">(</span><span class="token string">'20170615'</span> <span class="token punctuation">,</span> <span class="token string">'yyyy-mm-dd hh24:mi:ss'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span></code></pre><ul><li>to_date()函数<ul><li>将字符串转换为具体指定的时间日期格式</li></ul></li></ul><ul><li>如果安装的客户端是中文环境，格式 mon 就不能用英文的月份写法<ul><li>必须用中文的 <code>数字-数字+月-数字</code></li><li>或者使用 <code>to_date(&#39;1998-05-07&#39;,&#39;yyyy-mm-dd&#39;)</code></li></ul></li></ul><h2 id="定义表结构"><a href="#定义表结构" class="headerlink" title="定义表结构"></a>定义表结构</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> students <span class="token punctuation">(</span>       student_id number<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                  <span class="token keyword">constraint</span> student_pk <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>       monitor_id number<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       name varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>             <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>       sex varchar2<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>           <span class="token keyword">constraint</span> sex_chk <span class="token keyword">check</span><span class="token punctuation">(</span>sex <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       dob <span class="token keyword">date</span><span class="token punctuation">,</span>       specialty varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> departments <span class="token punctuation">(</span>       department_id number<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                     <span class="token keyword">constraint</span> department_pk <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>       department_name varchar2<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>                        <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>       address varchar2<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> teachers <span class="token punctuation">(</span>       teacher_id number<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                  <span class="token keyword">constraint</span> teacher_pk <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>       name varchar2<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>             <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>       title varchar2<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       hire_date <span class="token keyword">date</span>                  <span class="token keyword">default</span> sysdate<span class="token punctuation">,</span>       bonus number<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       wage number<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       department_id number<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                     <span class="token keyword">constraint</span> teachers_fk_departments                     <span class="token keyword">references</span> departments<span class="token punctuation">(</span>department_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> courses<span class="token punctuation">(</span>       course_id number<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                 <span class="token keyword">constraint</span> course_pk <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>       course_name varchar2<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>                    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>       credit_hour number<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> student_grade<span class="token punctuation">(</span>       student_id number<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                  <span class="token keyword">constraint</span> student_grade_fk_students                  <span class="token keyword">references</span> students<span class="token punctuation">(</span>student_id<span class="token punctuation">)</span><span class="token punctuation">,</span>       course_id number<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                 <span class="token keyword">constraint</span> student_grade_fk_courses                 <span class="token keyword">references</span> courses<span class="token punctuation">(</span>course_id<span class="token punctuation">)</span><span class="token punctuation">,</span>       score number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> grades<span class="token punctuation">(</span>       garde_id number<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">constraint</span> grade_ok <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>       low_score number<span class="token punctuation">(</span><span class="token number">4</span> <span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       high_score number<span class="token punctuation">(</span><span class="token number">4</span> <span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       grade varchar2<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> minors<span class="token punctuation">(</span>       minor_id number<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                <span class="token keyword">constraint</span> minor_pk <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>       minor_name varchar2<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>                   <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>       credit_hour number<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> courses2<span class="token punctuation">(</span>       course_id number<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                 <span class="token keyword">constraint</span> course2_pk <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>       course_name varchar2<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>                    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>       credit_hour number<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> student_computer<span class="token punctuation">(</span>       student_id number<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                  <span class="token keyword">constraint</span> student_computer_pk <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>       monitor_id number<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       name varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>             <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>       sex varchar2<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       dob <span class="token keyword">date</span><span class="token punctuation">,</span>       specialty varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="插入表数据"><a href="#插入表数据" class="headerlink" title="插入表数据"></a>插入表数据</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> students <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10101</span> <span class="token punctuation">,</span> <span class="token boolean">null</span> <span class="token punctuation">,</span> <span class="token string">'王晓芳'</span> <span class="token punctuation">,</span> <span class="token string">'女'</span> <span class="token punctuation">,</span> <span class="token string">'07-5月-1988'</span> <span class="token punctuation">,</span> <span class="token string">'计算机'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> students <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10205</span> <span class="token punctuation">,</span> <span class="token boolean">null</span> <span class="token punctuation">,</span> <span class="token string">'李秋枫'</span> <span class="token punctuation">,</span> <span class="token string">'男'</span> <span class="token punctuation">,</span> <span class="token string">'25-11月-1990'</span> <span class="token punctuation">,</span> <span class="token string">'自动化'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> students<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10102</span> <span class="token punctuation">,</span> <span class="token number">10101</span> <span class="token punctuation">,</span> <span class="token string">'刘春苹'</span> <span class="token punctuation">,</span> <span class="token string">'女'</span> <span class="token punctuation">,</span> <span class="token string">'12-8月-1991'</span> <span class="token punctuation">,</span> <span class="token string">'计算机'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> students<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10301</span> <span class="token punctuation">,</span> <span class="token boolean">null</span> <span class="token punctuation">,</span> <span class="token string">'高山'</span> <span class="token punctuation">,</span> <span class="token string">'男'</span> <span class="token punctuation">,</span> <span class="token string">'08-10月-1990'</span> <span class="token punctuation">,</span> <span class="token string">'机电工程'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> students<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10207</span> <span class="token punctuation">,</span> <span class="token number">10205</span> <span class="token punctuation">,</span> <span class="token string">'王刚'</span> <span class="token punctuation">,</span> <span class="token string">'男'</span> <span class="token punctuation">,</span> <span class="token string">'03-4月-1987'</span> <span class="token punctuation">,</span> <span class="token string">'自动化'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> students<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10112</span> <span class="token punctuation">,</span> <span class="token number">10101</span> <span class="token punctuation">,</span> <span class="token string">'张纯玉'</span> <span class="token punctuation">,</span> <span class="token string">'男'</span> <span class="token punctuation">,</span> <span class="token string">'21-7月-1989'</span> <span class="token punctuation">,</span> <span class="token string">'计算机'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> students<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10318</span> <span class="token punctuation">,</span> <span class="token number">10301</span> <span class="token punctuation">,</span> <span class="token string">'张冬云'</span> <span class="token punctuation">,</span> <span class="token string">'女'</span> <span class="token punctuation">,</span> <span class="token string">'26-12月-1989'</span> <span class="token punctuation">,</span> <span class="token string">'机电工程'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> students<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10103</span> <span class="token punctuation">,</span> <span class="token number">10101</span> <span class="token punctuation">,</span> <span class="token string">'王天仪'</span> <span class="token punctuation">,</span> <span class="token string">'男'</span> <span class="token punctuation">,</span> <span class="token string">'26-12月-1989'</span> <span class="token punctuation">,</span> <span class="token string">'计算机'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> students<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10201</span> <span class="token punctuation">,</span> <span class="token number">10205</span> <span class="token punctuation">,</span> <span class="token string">'赵风雨'</span> <span class="token punctuation">,</span> <span class="token string">'男'</span> <span class="token punctuation">,</span> <span class="token string">'25-10月-1990'</span> <span class="token punctuation">,</span> <span class="token string">'自动化'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> students<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10105</span> <span class="token punctuation">,</span> <span class="token number">10101</span> <span class="token punctuation">,</span> <span class="token string">'韩刘'</span> <span class="token punctuation">,</span> <span class="token string">'男'</span> <span class="token punctuation">,</span> <span class="token string">'3-8月-1991'</span> <span class="token punctuation">,</span> <span class="token string">'计算机'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> students<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10311</span> <span class="token punctuation">,</span> <span class="token number">10301</span> <span class="token punctuation">,</span> <span class="token string">'张杨'</span> <span class="token punctuation">,</span> <span class="token string">'男'</span> <span class="token punctuation">,</span> <span class="token string">'08-5月-1990'</span> <span class="token punctuation">,</span> <span class="token string">'机电工程'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> students<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10213</span> <span class="token punctuation">,</span> <span class="token number">10205</span> <span class="token punctuation">,</span> <span class="token string">'高淼'</span> <span class="token punctuation">,</span> <span class="token string">'男'</span> <span class="token punctuation">,</span> <span class="token string">'11-3月-1987'</span> <span class="token punctuation">,</span> <span class="token string">'自动化'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> students<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10212</span> <span class="token punctuation">,</span> <span class="token number">10205</span> <span class="token punctuation">,</span> <span class="token string">'欧阳春岚'</span> <span class="token punctuation">,</span> <span class="token string">'女'</span> <span class="token punctuation">,</span> <span class="token string">'12-3月-1989'</span> <span class="token punctuation">,</span> <span class="token string">'自动化'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> students<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10314</span> <span class="token punctuation">,</span> <span class="token number">10301</span> <span class="token punctuation">,</span> <span class="token string">'赵迪帆'</span> <span class="token punctuation">,</span> <span class="token string">'男'</span> <span class="token punctuation">,</span> <span class="token string">'22-9月-1989'</span> <span class="token punctuation">,</span> <span class="token string">'机电工程'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> students<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10312</span> <span class="token punctuation">,</span> <span class="token number">10301</span> <span class="token punctuation">,</span> <span class="token string">'白菲菲'</span> <span class="token punctuation">,</span> <span class="token string">'女'</span> <span class="token punctuation">,</span> <span class="token string">'07-5月-1988'</span> <span class="token punctuation">,</span> <span class="token string">'机电工程'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> students<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10328</span> <span class="token punctuation">,</span> <span class="token number">10301</span> <span class="token punctuation">,</span> <span class="token string">'曾程程'</span> <span class="token punctuation">,</span> <span class="token string">'男'</span> <span class="token punctuation">,</span> <span class="token boolean">null</span> <span class="token punctuation">,</span> <span class="token string">'机电工程'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> students<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10128</span> <span class="token punctuation">,</span> <span class="token number">10101</span> <span class="token punctuation">,</span> <span class="token string">'白昕'</span> <span class="token punctuation">,</span> <span class="token string">'男'</span> <span class="token punctuation">,</span> <span class="token boolean">null</span> <span class="token punctuation">,</span> <span class="token string">'计算机'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> students<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10228</span> <span class="token punctuation">,</span> <span class="token number">10205</span> <span class="token punctuation">,</span> <span class="token string">'林寒紫'</span> <span class="token punctuation">,</span> <span class="token string">'女'</span> <span class="token punctuation">,</span> <span class="token boolean">null</span> <span class="token punctuation">,</span> <span class="token string">'自动化'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> departments<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">101</span> <span class="token punctuation">,</span> <span class="token string">'信息工程'</span> <span class="token punctuation">,</span> <span class="token string">'1号教学楼'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> departments<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">102</span> <span class="token punctuation">,</span> <span class="token string">'电气工程'</span> <span class="token punctuation">,</span> <span class="token string">'2号教学楼'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> departments<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">103</span> <span class="token punctuation">,</span> <span class="token string">'机电工程'</span> <span class="token punctuation">,</span> <span class="token string">'3号教学楼'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> departments<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">104</span> <span class="token punctuation">,</span> <span class="token string">'工商管理'</span> <span class="token punctuation">,</span> <span class="token string">'4号教学楼'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> teachers<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10101</span> <span class="token punctuation">,</span> <span class="token string">'王彤'</span> <span class="token punctuation">,</span> <span class="token string">'教授'</span> <span class="token punctuation">,</span> <span class="token string">'01-9月-1990'</span> <span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">,</span> <span class="token number">3000</span> <span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> teachers<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10104</span> <span class="token punctuation">,</span> <span class="token string">'孔世杰'</span> <span class="token punctuation">,</span> <span class="token string">'副教授'</span> <span class="token punctuation">,</span> <span class="token string">'06-7月-1994'</span> <span class="token punctuation">,</span> <span class="token number">800</span> <span class="token punctuation">,</span> <span class="token number">2700</span> <span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> teachers<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10103</span> <span class="token punctuation">,</span> <span class="token string">'邹人文'</span> <span class="token punctuation">,</span> <span class="token string">'讲师'</span> <span class="token punctuation">,</span> <span class="token string">'21-1月-1996'</span> <span class="token punctuation">,</span> <span class="token number">600</span> <span class="token punctuation">,</span> <span class="token number">2400</span> <span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> teachers<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10106</span> <span class="token punctuation">,</span> <span class="token string">'韩冬梅'</span> <span class="token punctuation">,</span> <span class="token string">'助教'</span> <span class="token punctuation">,</span> <span class="token string">'01-8月-2002'</span> <span class="token punctuation">,</span> <span class="token number">500</span> <span class="token punctuation">,</span> <span class="token number">1800</span> <span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> teachers<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10210</span> <span class="token punctuation">,</span> <span class="token string">'杨文化'</span> <span class="token punctuation">,</span> <span class="token string">'教授'</span> <span class="token punctuation">,</span> <span class="token string">'03-10月-1989'</span> <span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">,</span> <span class="token number">3100</span> <span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> teachers<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10206</span> <span class="token punctuation">,</span> <span class="token string">'崔天'</span> <span class="token punctuation">,</span> <span class="token string">'助教'</span> <span class="token punctuation">,</span> <span class="token string">'05-9月-2000'</span> <span class="token punctuation">,</span> <span class="token number">500</span> <span class="token punctuation">,</span> <span class="token number">1900</span> <span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> teachers<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10209</span> <span class="token punctuation">,</span> <span class="token string">'孙晴碧'</span> <span class="token punctuation">,</span> <span class="token string">'讲师'</span> <span class="token punctuation">,</span> <span class="token string">'11-5月-1998'</span> <span class="token punctuation">,</span> <span class="token number">600</span> <span class="token punctuation">,</span> <span class="token number">2500</span> <span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> teachers<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10207</span> <span class="token punctuation">,</span> <span class="token string">'张珂'</span> <span class="token punctuation">,</span> <span class="token string">'讲师'</span> <span class="token punctuation">,</span> <span class="token string">'16-8月-1997'</span> <span class="token punctuation">,</span> <span class="token number">700</span> <span class="token punctuation">,</span> <span class="token number">2700</span> <span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> teachers<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10308</span> <span class="token punctuation">,</span> <span class="token string">'齐沈阳'</span> <span class="token punctuation">,</span> <span class="token string">'高工'</span> <span class="token punctuation">,</span> <span class="token string">'03-10月-1989'</span> <span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">,</span> <span class="token number">3100</span> <span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> teachers<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10306</span> <span class="token punctuation">,</span> <span class="token string">'车东日'</span> <span class="token punctuation">,</span> <span class="token string">'助教'</span> <span class="token punctuation">,</span> <span class="token string">'05-9月-2001'</span> <span class="token punctuation">,</span> <span class="token number">500</span> <span class="token punctuation">,</span> <span class="token number">1900</span> <span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> teachers<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10309</span> <span class="token punctuation">,</span> <span class="token string">'臧海涛'</span> <span class="token punctuation">,</span> <span class="token string">'工程师'</span> <span class="token punctuation">,</span> <span class="token string">'29-6月-1999'</span> <span class="token punctuation">,</span> <span class="token number">600</span> <span class="token punctuation">,</span> <span class="token number">2400</span> <span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> teachers<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10307</span> <span class="token punctuation">,</span> <span class="token string">'赵昆'</span> <span class="token punctuation">,</span> <span class="token string">'讲师'</span> <span class="token punctuation">,</span> <span class="token string">'18-2月-1996'</span> <span class="token punctuation">,</span> <span class="token number">800</span> <span class="token punctuation">,</span> <span class="token number">2700</span> <span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> teachers<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10128</span> <span class="token punctuation">,</span> <span class="token string">'王晓'</span> <span class="token punctuation">,</span> <span class="token boolean">null</span> <span class="token punctuation">,</span> <span class="token string">'05-9月-2007'</span> <span class="token punctuation">,</span> <span class="token boolean">null</span> <span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> teachers<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10328</span> <span class="token punctuation">,</span> <span class="token string">'张笑'</span> <span class="token punctuation">,</span> <span class="token boolean">null</span> <span class="token punctuation">,</span> <span class="token string">'29-9月-2007'</span> <span class="token punctuation">,</span> <span class="token boolean">null</span> <span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> teachers<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10228</span> <span class="token punctuation">,</span> <span class="token string">'赵天宇'</span> <span class="token punctuation">,</span> <span class="token boolean">null</span> <span class="token punctuation">,</span> <span class="token string">'18-9月-2007'</span> <span class="token punctuation">,</span> <span class="token boolean">null</span> <span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> courses<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10101</span> <span class="token punctuation">,</span> <span class="token string">'计算机组成原理'</span> <span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> courses<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10201</span> <span class="token punctuation">,</span> <span class="token string">'自动控制原理'</span> <span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> courses<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10301</span> <span class="token punctuation">,</span> <span class="token string">'工程制图'</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> courses<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10102</span> <span class="token punctuation">,</span> <span class="token string">'C++语言程序设计'</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> courses<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10202</span> <span class="token punctuation">,</span> <span class="token string">'模拟电子技术'</span> <span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> courses<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10302</span> <span class="token punctuation">,</span> <span class="token string">'理论力学'</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> courses<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10103</span> <span class="token punctuation">,</span> <span class="token string">'离散数学'</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> courses<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10203</span> <span class="token punctuation">,</span> <span class="token string">'数字电子技术'</span> <span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> courses<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10303</span> <span class="token punctuation">,</span> <span class="token string">'材料力学'</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> student_grade<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10101</span> <span class="token punctuation">,</span> <span class="token number">10101</span> <span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student_grade<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10101</span> <span class="token punctuation">,</span> <span class="token number">10201</span> <span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student_grade<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10101</span> <span class="token punctuation">,</span> <span class="token number">10301</span> <span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> grades<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">59</span> <span class="token punctuation">,</span> <span class="token string">'不及格'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> grades<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">60</span> <span class="token punctuation">,</span> <span class="token number">69</span> <span class="token punctuation">,</span> <span class="token string">'及格'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> grades<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token punctuation">,</span> <span class="token number">70</span> <span class="token punctuation">,</span> <span class="token number">79</span> <span class="token punctuation">,</span> <span class="token string">'中等'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> grades<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token punctuation">,</span> <span class="token number">80</span> <span class="token punctuation">,</span> <span class="token number">89</span> <span class="token punctuation">,</span> <span class="token string">'良好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> grades<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token punctuation">,</span> <span class="token number">90</span> <span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">,</span> <span class="token string">'优秀'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> minors<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10101</span> <span class="token punctuation">,</span> <span class="token string">'计算机组成原理'</span> <span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> minors<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10201</span> <span class="token punctuation">,</span> <span class="token string">'自动控制原理'</span> <span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> minors<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10301</span> <span class="token punctuation">,</span> <span class="token string">'工程制图'</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> courses2<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10201</span> <span class="token punctuation">,</span> <span class="token string">'自动控制原理'</span> <span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> courses2<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10301</span> <span class="token punctuation">,</span> <span class="token string">'工程制图'</span> <span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> student_computer       <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students                <span class="token keyword">where</span>                specialty <span class="token operator">=</span> <span class="token string">'计算机'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="表的三种基本操作"><a href="#表的三种基本操作" class="headerlink" title="表的三种基本操作"></a>表的三种基本操作</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> departments<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teachers<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> courses<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student_grade<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> grades<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> minors<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> courses2<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student_computer<span class="token punctuation">;</span></code></pre><ul><li>查看指定表中的所有行所有列的数据<ul><li><code>*</code> 星号表示检索所有的列</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> students<span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> departments<span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> teachers<span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> courses<span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> student_grade<span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> grades<span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> minors<span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> courses2<span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> stduent_computer<span class="token punctuation">;</span></code></pre><ul><li>删除指定表中的全部数据</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> students<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> departments<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> teachers<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> courses<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> student_grade<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> grades<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> minors<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> courses2<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> student_computer<span class="token punctuation">;</span></code></pre><ul><li>删除指定的整张表<ul><li>特殊删除顺序：先删除从表再删除主表</li></ul></li></ul><h2 id="数据操纵语言（DML）"><a href="#数据操纵语言（DML）" class="headerlink" title="数据操纵语言（DML）"></a>数据操纵语言（DML）</h2><ul><li>insert(增)</li><li>delete(删)</li><li>uodate(改)</li><li>以事务为单位，一个事务为一个工作的逻辑单位，是一个 SQL 语句序列</li><li>执行每一个 DML 语句，所有的操作都在内存中完成</li><li>执行完一系列 DML 语句后，需要决定由DML语句所做的修改是<ul><li>全部或部分地保留到硬盘文件上</li><li>还是全部撤销</li><li>这些决定由事务处理语句来完成<ul><li>commit（提交）</li><li>savepoint（保留点）</li><li>rollback（撤销）<ul><li>事务被用来确保数据库中数据的一致性</li><li>要么全部成功</li><li>要么全部取消</li></ul></li></ul></li><li>数据库事务开始于应用程序中的第一条 DLM 语句</li><li>数据库事务开始后：<ul><li>Oracle 会为 DLM 操作涉及的表加上表锁<ul><li>防止其他用户改变表结构</li></ul></li><li>Oracle 会为 DLM 操作涉及的行加上行锁<ul><li>防止其他事务在相应的行上执行 DML 操作</li></ul></li></ul></li><li>数据库事务结束后，释放封锁（表锁和行锁）</li></ul></li></ul><ul><li>insert<ul><li>数字列，直接提供数值</li><li>字符列，<code>&#39;&#39;</code>英文单引号</li><li>日期列，<code>&#39;&#39;</code>英文单引号</li><li>提供数据的顺序问题<ul><li>或与表中列的顺序完全一致</li><li>或与提供的列表中的列名顺序一致</li></ul></li><li>必须为主键和 not null 提供数据<ul><li>未指定列的值<ul><li>或 null（可显示处理）</li><li>或 default（可显示处理）</li></ul></li></ul></li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> students <span class="token keyword">set</span>       student_id <span class="token operator">=</span> <span class="token number">11111</span>       <span class="token keyword">where</span>       student_id <span class="token operator">=</span> <span class="token number">10228</span><span class="token punctuation">;</span><span class="token keyword">update</span> students <span class="token keyword">set</span>       specialty <span class="token operator">=</span> <span class="token string">'计算机应用'</span>       <span class="token keyword">where</span>       specialty <span class="token operator">=</span> <span class="token string">'计算机'</span><span class="token punctuation">;</span><span class="token keyword">update</span> students <span class="token keyword">set</span>       dob <span class="token operator">=</span> <span class="token string">'11-1月-1111'</span>       <span class="token keyword">where</span>       student_id <span class="token operator">=</span> <span class="token number">11111</span><span class="token punctuation">;</span><span class="token keyword">update</span> students <span class="token keyword">set</span>       specialty <span class="token operator">=</span> <span class="token boolean">null</span>       <span class="token keyword">where</span>       student_id <span class="token operator">=</span> <span class="token number">11111</span><span class="token punctuation">;</span><span class="token keyword">update</span> teachers <span class="token keyword">set</span>       wage <span class="token operator">=</span> wage <span class="token operator">*</span> <span class="token number">1.1</span> <span class="token punctuation">,</span>       bonus <span class="token operator">=</span> bonus <span class="token operator">+</span> <span class="token number">1000</span>       <span class="token keyword">where</span>       title <span class="token operator">=</span> <span class="token string">'教授'</span><span class="token punctuation">;</span></code></pre><ul><li>update<ul><li>数字列，直接提供数值</li><li>字符列，<code>&#39;&#39;</code>英文单引号</li><li>日期列，<code>&#39;&#39;</code>英文单引号</li><li>使用 where ，修改指定行</li><li>不使用 where ，修改所有行</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> students       <span class="token keyword">where</span>        specialty <span class="token operator">=</span> <span class="token string">'计算机应用'</span><span class="token punctuation">;</span></code></pre><ul><li>delete<ul><li>where ，删除指定行</li><li>不使用 where ，删除所有行</li><li>不会释放表所占空间，操作可以撤销（rollback）</li></ul></li><li>truncate table<ul><li><code>truncate table table_name</code></li><li>会释放表所占空间</li><li>操作不可撤销</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> student_computer       <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students                <span class="token keyword">where</span>                specialty <span class="token operator">=</span> <span class="token string">'计算机'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>含有子查询的 DML 之 insert 语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> teachers <span class="token keyword">set</span>        bonus <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>bonus<span class="token punctuation">)</span> <span class="token keyword">from</span> teachers<span class="token punctuation">)</span>       <span class="token keyword">where</span>        bonus <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre><ul><li>含有子查询的 DML 之 update 语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> teachers       <span class="token keyword">where</span>        wage <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1.1</span> <span class="token operator">*</span> <span class="token function">avg</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token keyword">from</span> teachers<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>含有子查询的 DML 之 delete 语句</li></ul><h2 id="数据库的完整性"><a href="#数据库的完整性" class="headerlink" title="数据库的完整性"></a>数据库的完整性</h2><ul><li>实体完整性：<ul><li>表的主键不能为空值 null</li><li>表的主键不能取重复值</li></ul></li></ul><ul><li><p>参照完整性</p><ul><li>teachers 表</li><li>通过 department_id 列与</li><li>departments 表</li><li>建立了参照完整性<ul><li>从表 teachers</li><li>主表 departments</li></ul></li><li>从表 teachers 中的 department_id 只能取<ul><li>或 null 值</li><li>或 departments 主表中的 department_id 值</li></ul></li></ul></li><li><p>违反参照完整性约束规则：</p><ul><li><p>1、</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> departments       <span class="token keyword">where</span>        department_id <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span></code></pre><ul><li>主表要删除的 department_id ，从表中存在</li></ul></li><li><p>2、</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> departments <span class="token keyword">set</span>        department_id <span class="token operator">=</span> <span class="token number">105</span>        <span class="token keyword">where</span>        department_id <span class="token operator">=</span> <span class="token number">102</span><span class="token punctuation">;</span></code></pre><ul><li>主表要修改的 department_id ，从表中存在</li></ul></li><li><p>3、</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> teachers <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>从表中插入的 department_id ，主表中无</li></ul></li><li><p>4、</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> teachers <span class="token keyword">set</span>        department_id <span class="token operator">=</span> <span class="token number">107</span>       <span class="token keyword">where</span>        teacher_id <span class="token operator">=</span> <span class="token number">10106</span><span class="token punctuation">;</span></code></pre><ul><li>从表要修改的 department_id ，主表中无</li></ul></li></ul></li></ul><ul><li><p>自定义完整性</p><ul><li><p>1、</p><ul><li>例如插入学生记录时，没有给出姓名值</li><li>违反了 not null 自定义完整性约束</li></ul></li><li><p>2、</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> student <span class="token keyword">set</span>       sex <span class="token operator">=</span> <span class="token string">'南'</span>        <span class="token keyword">where</span>        student_id <span class="token operator">=</span> <span class="token number">10205</span><span class="token punctuation">;</span></code></pre><ul><li>违反了 check 自定义完整性约束（只能取‘男’或‘女’）</li></ul></li></ul></li></ul><h2 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h2><ul><li>commit<ul><li>（显示处理事务）提交事务</li><li>结束当前事务</li><li>把当前事务所执行的全部修改保存到外存的数据库中</li><li>删除事务的所有保留点</li><li>释放该事务的封锁</li></ul></li></ul><ul><li>rollback<ul><li>（显示处理事务）撤销事务</li><li>结束当前事务</li><li>撤销当前事务中所做的全部修改</li><li>删除当前事务中所建的全部保留点</li><li>释放该事务的封锁</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> departments <span class="token keyword">set</span>       address <span class="token operator">=</span> <span class="token string">'5号教学楼'</span>       <span class="token keyword">where</span>        department_id <span class="token operator">=</span> <span class="token number">104</span><span class="token punctuation">;</span><span class="token keyword">savepoint</span> sp1<span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> departments        <span class="token keyword">where</span>        department_id <span class="token operator">=</span> <span class="token number">104</span><span class="token punctuation">;</span><span class="token keyword">rollback</span> <span class="token keyword">to</span> sp1<span class="token punctuation">;</span></code></pre><ul><li>savepoint<ul><li>rollback to sp1<ul><li>撤销保留点 sp1 之后的全部事务</li><li>删除保留点 sp1 之后的全部保留点</li></ul></li></ul></li></ul><ul><li>隐式处理事务：<ul><li>执行 create table 、alter table 、drop table 等语句时<ul><li>Oracle 系统自动提交 commit 事务</li></ul></li><li>执行 exit（正常）退出 SQL*Plus 时<ul><li>Oracle 系统自动提交 commit 事务</li></ul></li><li>当意外（非正常）退出 SQL*Plus 时<ul><li>Oracle 系统自动撤销 rollback 事务</li></ul></li></ul></li></ul><ul><li><code>set transaction read only</code><ul><li>（特殊事务）只读事务</li><li>只允许查询语句</li><li>不允许执行 DML 语句</li><li>可以取得特定时间点的数据</li><li>该命令必须为事务的第一条语句</li><li>必须由 commit 、rollback 语句来结束只读事务</li></ul></li></ul><h2 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token punctuation">,</span> hire_date <span class="token keyword">from</span> teachers<span class="token punctuation">;</span><span class="token keyword">select</span> name <span class="token punctuation">,</span> to_char<span class="token punctuation">(</span>hire_date<span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> teachers<span class="token punctuation">;</span></code></pre><ul><li>查询指定列，多列需用英文逗号隔开</li><li>日期数据的默认格式可以用“to_char”转换成其他显示格式</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> specialty <span class="token keyword">from</span> students<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> specialty <span class="token keyword">from</span> students<span class="token punctuation">;</span></code></pre><ul><li><code>distinct</code><ul><li>（明显的、有区别的）</li><li>消除完全重复的记录行（当选择主键以外的列执行查询操作时）</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token keyword">as</span> <span class="token string">"姓名"</span> <span class="token punctuation">,</span> dob <span class="token keyword">as</span> <span class="token string">"生日"</span> <span class="token keyword">from</span> students<span class="token punctuation">;</span></code></pre><ul><li>列别名<ul><li><code>as + &quot;......&quot;</code></li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token operator">||</span> <span class="token string">'生日是：'</span> <span class="token operator">||</span> dob <span class="token keyword">as</span> <span class="token string">"学生生日清单"</span> <span class="token keyword">from</span> students<span class="token punctuation">;</span></code></pre><ul><li><code>||</code><ul><li>字符串连接</li><li>连接的字符串要使用英文单引号 <code>&#39;&#39;</code></li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token keyword">as</span> <span class="token string">"姓名"</span> <span class="token punctuation">,</span> bonus<span class="token operator">+</span>wage <span class="token keyword">as</span> <span class="token string">"月总收入"</span> <span class="token keyword">from</span> teachers<span class="token punctuation">;</span></code></pre><ul><li>算术表达式<ul><li>使用括号可以改变运算次序</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token keyword">as</span> <span class="token string">"姓名"</span> <span class="token punctuation">,</span> nvl<span class="token punctuation">(</span>bonus <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>wage <span class="token keyword">as</span> <span class="token string">"月总收入"</span> <span class="token keyword">from</span> teachers<span class="token punctuation">;</span><span class="token keyword">select</span> name <span class="token keyword">as</span> <span class="token string">"姓名"</span> <span class="token punctuation">,</span> nvl2<span class="token punctuation">(</span>bonus <span class="token punctuation">,</span> bonus<span class="token operator">+</span>wage <span class="token punctuation">,</span> wage<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"月总收入"</span>        <span class="token keyword">from</span> teachers<span class="token punctuation">;</span><span class="token keyword">select</span> name <span class="token keyword">as</span> <span class="token string">"姓名"</span> <span class="token punctuation">,</span> <span class="token keyword">coalesce</span><span class="token punctuation">(</span>bonus<span class="token operator">+</span>wage <span class="token punctuation">,</span> wage<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"月总收入"</span>        <span class="token keyword">from</span> teachers<span class="token punctuation">;</span></code></pre><ul><li>任何数据类型的列<ul><li>只要没有使用非空 not null 或主键 primary key 完整性约束</li><li>就都有可能出现空值 null</li><li>空值 null 没有数据类型</li><li>空值 null 出现在字符串连接表达式中，Oracle 将其作为空串处理</li><li>空值 null 出现在算术表达式中，运算结果为 null</li><li>为了解决空值 null 参加运算时出现的问题，Oracle 提供了3个函数对此进行处理</li><li>nvl（A , B）<br>​   - A 、B 的数据类型必须匹配<br>​   - A 为 null ，返回 B<br>​   - A 不为 null ，返回 A</li><li>nvl2（A ，B ，C）<br>​   - A 、B 、C 的数据类型必须匹配<br>​   - A 为 null ,返回 C<br>​   - A 不为 null ，返回 B</li><li>coalesce（A、B、C、D…）<br>​   - 联合，合并<br>​   - 返回参数列表中的第一个非空值<br>​   - 若参数列表皆为空值，最终返回一个空值 null</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token punctuation">,</span> hire_date <span class="token punctuation">,</span> title <span class="token punctuation">,</span> wage <span class="token keyword">from</span> teachers        <span class="token keyword">where</span>        wage <span class="token operator">>=</span> <span class="token number">2000</span><span class="token punctuation">;</span><span class="token keyword">select</span> student_id <span class="token punctuation">,</span> name <span class="token punctuation">,</span> specialty <span class="token punctuation">,</span> dob <span class="token keyword">from</span> students       <span class="token keyword">where</span>        specialty <span class="token operator">=</span> <span class="token string">'计算机'</span><span class="token punctuation">;</span><span class="token keyword">select</span> student_id <span class="token punctuation">,</span> name <span class="token punctuation">,</span> specialty <span class="token punctuation">,</span> dob <span class="token keyword">from</span> students       <span class="token keyword">where</span>        dob <span class="token operator">&lt;</span> <span class="token string">'1-1月-1990'</span><span class="token punctuation">;</span></code></pre><ul><li>算术运算比较符<code>= 、&lt; 、&lt;= 、&gt; 、&gt;= 、 &lt;&gt;(!=)</code></li></ul><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token punctuation">,</span> hire_date <span class="token punctuation">,</span> title <span class="token punctuation">,</span> bonus <span class="token keyword">from</span> teachers       <span class="token keyword">where</span>        bonus <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">500</span> <span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> student_id <span class="token punctuation">,</span> name <span class="token punctuation">,</span> specialty <span class="token punctuation">,</span> dob <span class="token keyword">from</span> students       <span class="token keyword">where</span>        dob <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'26-12月-1989'</span> <span class="token punctuation">,</span> <span class="token string">'08-10月-1990'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>包含测试 <code>in</code></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token punctuation">,</span> hire_date <span class="token punctuation">,</span> title <span class="token punctuation">,</span> bonus <span class="token keyword">from</span> teachers       <span class="token keyword">where</span>        bonus <span class="token operator">between</span> <span class="token number">500</span> <span class="token operator">and</span> <span class="token number">1500</span><span class="token punctuation">;</span></code></pre><ul><li>范围测试 <code>between-and</code></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> student_id <span class="token punctuation">,</span> name <span class="token punctuation">,</span> specialty <span class="token punctuation">,</span>dob <span class="token keyword">from</span> students       <span class="token keyword">where</span>        name <span class="token operator">like</span> <span class="token string">'王%'</span><span class="token punctuation">;</span><span class="token keyword">select</span> student_id <span class="token punctuation">,</span> name <span class="token punctuation">,</span> specialty <span class="token punctuation">,</span>dob <span class="token keyword">from</span> students       <span class="token keyword">where</span>        name <span class="token operator">like</span> <span class="token string">'王_'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students<span class="token punctuation">;</span></code></pre><ul><li>匹配测试 <code>like</code><ul><li>通配符 <code>%（百分号）</code>表示0或多个字符</li><li>通配符 <code>_（下划线）</code>表示单个字符</li><li>通配符只用于 like 条件</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token punctuation">,</span> hire_date <span class="token punctuation">,</span> title <span class="token punctuation">,</span>bonus <span class="token keyword">from</span> teachers       <span class="token keyword">where</span>        bonus <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token keyword">select</span> name <span class="token punctuation">,</span> hire_date <span class="token punctuation">,</span> title <span class="token punctuation">,</span>bonus <span class="token keyword">from</span> teachers       <span class="token keyword">where</span>        title <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token keyword">select</span> student_id <span class="token punctuation">,</span> name <span class="token punctuation">,</span> specialty <span class="token punctuation">,</span>dob <span class="token keyword">from</span> students       <span class="token keyword">where</span>        dob <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre><ul><li>空值测试 <code>is null</code><ul><li>不可写成 = null</li><li>因为 null 是一个未知或未确定的数据</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> student_id <span class="token punctuation">,</span> name <span class="token punctuation">,</span> sex <span class="token punctuation">,</span> specialty <span class="token keyword">from</span> students       <span class="token keyword">where</span>        specialty <span class="token operator">=</span> <span class="token string">'计算机'</span> <span class="token operator">and</span> sex <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span><span class="token keyword">select</span> student_id <span class="token punctuation">,</span> name <span class="token punctuation">,</span> sex <span class="token punctuation">,</span> specialty <span class="token keyword">from</span> students       <span class="token keyword">where</span>        specialty <span class="token operator">=</span> <span class="token string">'计算机'</span> <span class="token operator">or</span> specialty <span class="token operator">=</span> <span class="token string">'自动化'</span><span class="token punctuation">;</span><span class="token keyword">select</span> student_id <span class="token punctuation">,</span> name <span class="token punctuation">,</span> sex <span class="token punctuation">,</span> specialty <span class="token keyword">from</span> students       <span class="token keyword">where</span>        <span class="token operator">not</span> specialty <span class="token operator">=</span> <span class="token string">'计算机'</span><span class="token punctuation">;</span><span class="token keyword">select</span> student_id <span class="token punctuation">,</span> name <span class="token punctuation">,</span>specialty <span class="token punctuation">,</span> dob <span class="token keyword">from</span> students       <span class="token keyword">where</span>        dob <span class="token operator">not</span> <span class="token operator">between</span> <span class="token string">'1-1月-1989'</span> <span class="token operator">and</span> <span class="token string">'1-1月-1990'</span><span class="token punctuation">;</span><span class="token keyword">select</span> student_id <span class="token punctuation">,</span> name <span class="token punctuation">,</span>specialty <span class="token punctuation">,</span> dob <span class="token keyword">from</span> students       <span class="token keyword">where</span>        name <span class="token operator">not</span> <span class="token operator">like</span> <span class="token string">'张%'</span><span class="token punctuation">;</span><span class="token keyword">select</span> student_id <span class="token punctuation">,</span> name <span class="token punctuation">,</span>specialty <span class="token punctuation">,</span> dob <span class="token keyword">from</span> students       <span class="token keyword">where</span>        name <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'欧阳春岚'</span> <span class="token punctuation">,</span> <span class="token string">'高山'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token keyword">select</span> name <span class="token punctuation">,</span> hire_date <span class="token punctuation">,</span> title <span class="token punctuation">,</span>bonus <span class="token keyword">from</span> teachers       <span class="token keyword">where</span>        bonus <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre><ul><li>where 子句的复合条件查询涉及逻辑运算符<ul><li>and 、or 为双操作数逻辑运算符</li><li>not 为单操作数逻辑运算符</li><li>not 主要与 = 、between-and 、like 、in 以及 is null 结合使用</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> student_id <span class="token punctuation">,</span> name <span class="token punctuation">,</span> sex <span class="token punctuation">,</span> specialty <span class="token keyword">from</span> students       <span class="token keyword">where</span>       specialty <span class="token operator">=</span> <span class="token string">'计算机'</span> <span class="token operator">and</span> sex <span class="token operator">=</span> <span class="token string">'女'</span>       <span class="token operator">or</span>       specialty <span class="token operator">=</span> <span class="token string">'机电工程'</span> <span class="token operator">and</span> sex <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span><span class="token keyword">select</span> name <span class="token punctuation">,</span> hire_date <span class="token punctuation">,</span> title <span class="token punctuation">,</span> bonus <span class="token punctuation">,</span> wage <span class="token keyword">from</span> teachers       <span class="token keyword">where</span>       <span class="token operator">not</span> title <span class="token operator">=</span> <span class="token string">'工程师'</span>       <span class="token operator">and</span>       hire_date <span class="token operator">&lt;</span> <span class="token string">'1-1月-2002'</span>       <span class="token operator">and</span>       wage <span class="token operator">&lt;</span> <span class="token number">3000</span><span class="token punctuation">;</span></code></pre><ul><li>组合使用逻辑条件<ul><li>not &gt;  and &gt;  or </li><li>括号可以改变优先级</li></ul></li></ul><h2 id="记录排序"><a href="#记录排序" class="headerlink" title="记录排序"></a>记录排序</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token punctuation">,</span> hire_date <span class="token punctuation">,</span> title <span class="token punctuation">,</span> bonus <span class="token punctuation">,</span> wage <span class="token keyword">from</span> teachers       <span class="token keyword">order</span> <span class="token keyword">by</span> wage <span class="token keyword">asc</span><span class="token punctuation">;</span><span class="token keyword">select</span> name <span class="token punctuation">,</span> hire_date <span class="token punctuation">,</span> title <span class="token punctuation">,</span> bonus <span class="token punctuation">,</span> wage <span class="token keyword">from</span> teachers       <span class="token keyword">order</span> <span class="token keyword">by</span> wage<span class="token punctuation">;</span></code></pre><ul><li><code>asc</code><ul><li>指定进行升序排序</li><li>asc 可省略</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token keyword">as</span> <span class="token string">"姓名"</span> <span class="token punctuation">,</span> dob <span class="token keyword">as</span> <span class="token string">"出生日期"</span> <span class="token keyword">from</span> students       <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token string">"出生日期"</span> <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token keyword">select</span> student_id <span class="token punctuation">,</span> name <span class="token punctuation">,</span> specialty <span class="token punctuation">,</span> dob <span class="token keyword">from</span> students       <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">2</span> <span class="token keyword">desc</span><span class="token punctuation">;</span></code></pre><ul><li><code>desc</code> <ul><li>指定进行降序排序</li><li>desc 不可省略</li><li>所指定的排序列包含 null 值的记录行会排列在最前面</li><li>可以使用列别名进行排序</li><li>如果列名或表达式名称较长，可以使用列位置序号排序</li><li>汉字排序按其拼音对应的英文字母的顺序进行</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> student_id <span class="token punctuation">,</span> name <span class="token punctuation">,</span> specialty <span class="token punctuation">,</span> dob <span class="token keyword">from</span> students       <span class="token keyword">order</span> <span class="token keyword">by</span> specialty <span class="token punctuation">,</span> name <span class="token keyword">asc</span><span class="token punctuation">;</span><span class="token keyword">select</span> student_id <span class="token punctuation">,</span> name <span class="token punctuation">,</span> specialty <span class="token punctuation">,</span> dob <span class="token keyword">from</span> students       <span class="token keyword">order</span> <span class="token keyword">by</span> specialty <span class="token punctuation">,</span> name <span class="token keyword">desc</span><span class="token punctuation">;</span></code></pre><ul><li>多列排序<ul><li>先按指定的第一个列进行排序</li><li>再按指定的第二个列进行排序</li><li>依次类推</li></ul></li></ul><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token keyword">from</span> teachers<span class="token punctuation">;</span></code></pre><ul><li>avg()<ul><li>列函数</li><li>用于计算列或表达式的平均值</li><li>只适用于数值型数据</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> students<span class="token punctuation">;</span></code></pre><ul><li>count(*)<ul><li>列函数</li><li>用于取得指定表的记录总行数</li><li>除 count(*) 外其他列函数都不考虑 null 行</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>dob<span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>dob<span class="token punctuation">)</span> <span class="token keyword">from</span> students<span class="token punctuation">;</span></code></pre><ul><li>max()<ul><li>列函数</li><li>用于求出列或表达式的最大值</li><li>适用于任何数据类型</li></ul></li><li>min()<ul><li>列函数</li><li>用于求出列或表达式的最小值</li><li>适用于任何数据类型</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token keyword">from</span> teachers<span class="token punctuation">;</span></code></pre><ul><li>sum()<ul><li>列函数</li><li>用于对列或表达式求总和</li><li>只适用于数值型数据</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> variance<span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token keyword">from</span> teachers<span class="token punctuation">;</span></code></pre><ul><li>variance()<ul><li>列函数</li><li>用于求出列或表达式的方差</li><li>只适用于数值型数据</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> stddev<span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token keyword">from</span> teachers<span class="token punctuation">;</span></code></pre><ul><li>stddev()<ul><li>列函数</li><li>用于求出列或表达式的标准偏差</li><li>只适用于数值型数据</li><li>当只有一行数据时，stddev() 返回0</li><li>当存在多行数据时，stddev() 按照 variance() 值的平方根来计算标准偏差</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> department_id <span class="token keyword">from</span> teachers       <span class="token keyword">group</span> <span class="token keyword">by</span> department_id<span class="token punctuation">;</span><span class="token keyword">select</span> department_id <span class="token punctuation">,</span> title <span class="token keyword">from</span> teachers       <span class="token keyword">group</span> <span class="token keyword">by</span> department_id <span class="token punctuation">,</span> title<span class="token punctuation">;</span><span class="token keyword">select</span> department_id <span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token keyword">from</span> teachers       <span class="token keyword">group</span> <span class="token keyword">by</span> department_id<span class="token punctuation">;</span><span class="token keyword">select</span> department_id <span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token keyword">from</span> teachers       <span class="token keyword">group</span> <span class="token keyword">by</span> department_id<span class="token punctuation">;</span><span class="token keyword">select</span> department_id <span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> teachers       <span class="token keyword">group</span> <span class="token keyword">by</span> department_id<span class="token punctuation">;</span><span class="token keyword">select</span> department_id <span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token keyword">from</span> teachers       <span class="token keyword">where</span>        wage <span class="token operator">></span> <span class="token number">1000</span>       <span class="token keyword">group</span> <span class="token keyword">by</span> department_id<span class="token punctuation">;</span></code></pre><ul><li><code>group by</code><ul><li>用于分组，组中的行并不互相重复</li><li>可以单独使用</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> department_id <span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token keyword">from</span> teachers       <span class="token keyword">group</span> <span class="token keyword">by</span> department_id       <span class="token keyword">having</span> <span class="token function">avg</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2200</span><span class="token punctuation">;</span><span class="token keyword">select</span> department_id <span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token keyword">from</span> teachers       <span class="token keyword">where</span>        wage <span class="token operator">&lt;</span> <span class="token number">3000</span>       <span class="token keyword">group</span> <span class="token keyword">by</span> department_id       <span class="token keyword">having</span> <span class="token function">avg</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2000</span><span class="token punctuation">;</span><span class="token keyword">select</span> department_id <span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token keyword">from</span> teachers       <span class="token keyword">where</span>        wage <span class="token operator">&lt;</span> <span class="token number">3000</span>       <span class="token keyword">group</span> <span class="token keyword">by</span> department_id       <span class="token keyword">having</span> <span class="token function">avg</span><span class="token punctuation">(</span>wage<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2000</span>       <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><ul><li><p><code>having</code></p><ul><li><p>指定条件，用于限制分组显示结果</p></li><li><p>having 必须与 group by 一起使用</p></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Foundation </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Sense of Beauty</title>
      <link href="/2018/09/30/Sense-of-Beauty/"/>
      <url>/2018/09/30/Sense-of-Beauty/</url>
      
        <content type="html"><![CDATA[<p><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fvqyk8u5bpj30ia0rf0ul.jpg" alt="wallhaven-334802"></p><ul><li><a href="https://alpha.wallhaven.cc/" target="_blank" rel="noopener"><strong><font size="5">推荐一个超级好用的摄影后期素材网站(个人最爱)</font><br> </strong></a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Photograph </tag>
            
            <tag> Aesthetic Perception </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/09/29/hello-world/"/>
      <url>/2018/09/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> For Free </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
